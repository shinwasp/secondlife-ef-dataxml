<?xml version="1.0" encoding="UTF-8"?>
<Conf color="#FFFFFF" slcolor="#C8D1CC">
	<Words name="States" icon="0">
		<Word name="default">
			<![CDATA[
			All scripts must have a <font color="blue">default</font> state,
			which also must be the first state entered when the script starts.
			If another state is defined before the default state,
			the compiler will report a syntax error.
			]]>
		</Word>
		<Word name="state"/>
	</Words>
	<Words name="Defaults" icon="0" color="#FF0000">
		<Word name="if" args="all condition">
		Execute some statement(s) if a condition is true, else some other statement(s) if it is false.
		</Word>
		<Word name="else if" args="all condition">
		Execute some statement(s) if a condition is true, else some other statement(s) if it is false.
		</Word>
		<Word name="else">
		Execute some statement(s) if a condition is true, else some other statement(s) if it is false.
		</Word>
		<Word name="for" args="integer initialization;integer condition;integer update">
		The for loop is used to execute statements while a condition is true, and executes a line of code after each iteration/cycle/step. 
		More commonly, it executes code a certain number of times, and operates a counter to facilitate it.
		</Word>
	</Words>
	<Words  name="Types" icon="2">
		<Word name="integer" />
		<Word name="float"/>
		<Word name="vector" />
		<Word name="rotation" />
		<Word name="key" />
		<Word name="string" />
		<Word name="list" />
	</Words>
	<Words  name="Events" icon="3" color="#00A0A0">
		Every state must have at least one handler. You can choose to
		handle an event by defining one of the the reserved
		event handlers named here.

		<Word name="attach" args="key attached">
			attach(key attached)

			This event is triggered whenever a object with this script is 
			attached or detached from an avatar. If it is attached,
			attached is the key of the avatar it is attached to,otherwise 
			attached is NULL_KEY.
		</Word>
		<Word name="at_target" args="integer tnum,vector targetpos,vector ourpos">
			at_target(integer tnum,vector targetpos,vector ourpos)

			This event handler is triggered when the scripted object comes within
			a defined range of the target position targetpos
			(defined by the llTarget function call).
		</Word>
		<Word name="not_at_target">
			not_at_target()

			When a target is set via the llTarget library call,
			but the script is outside the specified range this event is raised.
		</Word>
		<Word name="at_rot_target" args="integer number,rotation target_rotation,rotation our_rotation">
			at_rot_target(integer number,rotation target_rotation,rotation our_rotation)

			This event is triggered when a script comes within a defined 
			angle of a target rotation. The range is set by a call
			to llRotTarget.
		</Word>
		<Word name="not_at_rot_target">
			not_at_rot_target()

			When a target is set via the llRotTarget library call,
			but the script is outside the specified angle this event is raised.
		</Word>
		<Word name="changed" args="integer change">
			changed(integer change)

			Triggered when various events change the object. The change 
			argument will be a bitfield of change constants.
		</Word>
		<Word name="collision" args="integer total_number">
			collision(integer total_number)

			This event is raised while another object is colliding with 
			the object the script is attached to. The number of
			detected objects is passed to the script. Information on 
			those objects may be gathered via the llDetected* library
			functions. 
			(Collisions are also generated if a user walks into an object.)
		</Word>
		<Word name="collision_end" args="integer total_number">
			collision_end(integer total_number)

			This event is raised when another object stops colliding with 
			the object the script is attached to. The number of
			detected objects is passed to the script. Information on those 
			objects may be gathered via the llDetected* library
			functions. 
			(Collisions are also generated if a user walks into an object.)
		</Word>
		<Word name="collision_start" args="integer total_number">
			collision_start(integer total_number)

			This event is raised when another object begins to collide with 
			the object the script is attached to. The number of
			detected objects is passed to the script. Information on 
			those objects may be gathered via the llDetected* library
			functions. 
			(Collisions are also generated if a user walks into an object.)
		</Word>
		<Word name="control" args="key name,integer levels,integer edges">
			control(key name,integer levels,integer edges)

			Once a script has the ability to grab control inputs from the avatar,
			this event will be used to pass the commands
			into the script. The levelsand edgesare bitfields 
			of control constsants.
		</Word>
		<Word name="dataserver" args="key requested,string data">
			dataserver(key requested,string data)

			This event is triggered when the requested data is returned 
			to the script. Data may be requested by the
			llRequestAgentData,the llRequestInventoryData,
			and the llGetNotecardLine function calls.
		</Word>
		<Word name="email" args="string time,string address,string subject,string body,integer remaining">
			email(string time,string address,string subject,string body,integer remaining)

			This event is triggered when an email sent to this script arrives. 
			The remaining tells how many more emails are known as still pending.
		</Word>
		<Word name="land_collision" args="vector position">
			land_collision(vector position)

			This event is raised when the object the script is attached 
			to is colliding with the ground.
		</Word>
		<Word name="land_collision_end" args="vector position">
			land_collision_end(vector position)

			This event is raised when the object the script is attached 
			to stops colliding with the ground.
		</Word>
		<Word name="land_collision_start" args="vector position">
			land_collision_start(vector position)

			This event is raised when the object the script is attached 
			to begins to collide with the ground.
		</Word>
		<Word name="link_message" args="integer sender_number,integer number,string message,key id">
			link_message(integer sender_number,integer number,string message,key id)

			Triggered when object receives a link message via llMessageLinked
			library function call.
		</Word>
		<Word name="listen" args="integer channel,string name,key id,string message">
			listen(integer channel,string name,key id,string message)

			This event is raised whenever a chat message matching the 
			constraints passed in the llListen command is heard.
			The nameand id of the speaker as well as the messageare passed 
			in as parameters. Channel 0 is the public
			chat channel that all avatars see as chat text. 
			Channels 1 through 2,147,483,648 are private channels that are not
			sent to avatars but other scripts can listen on those channels.
		</Word>
		<Word name="money" args="key giver,integer amount">
			money(key giver,integer amount)

			This event is triggered when user giver has given an amount 
			of Linden dollars to the object.
		</Word>
		<Word name="moving_start">
			moving_start()

			Triggered whenever a object with this script starts moving.
		</Word>
		<Word name="moving_end">
			moving_end()

			Triggered whenever a object with this script stops moving.
		</Word>
		<Word name="no_sensor">
			no_sensor()

			This event is raised when sensors are active 
			(via the llSensor library call) but are not sensing anything.
		</Word>

		<Word name="object_rez" args="key id">
			object_rez(key id)

			Triggered when object rez-es in another object from its 
			inventory via the llRezObject api. The id is the globally
			unique key for the object.
		</Word>
		<Word name="on_rez" args="integer start_param">
			on_rez(integer start_param)

			Triggered whenever a object is rez-ed from inventory 
			or by another object. The start_paramis the parameter
			passed in from the call to llRezObject.
		</Word>
		<Word name="run_time_permissions" args="integer permissions">
			run_time_permissions(integer permissions)

			Scripts need permission from either the owner or the avatar 
			they wish to act on before they perform certain
			functions,such as debiting money from their owners account,
			triggering an animation on an avatar,or capturing
			control inputs. The llRequestPermissions library 
			function is used to request these permissions and the various
			permissions integer constants can be supplied. 
			The integer returned to this event handler contains the current set
			of permissions flags,so if permissionseqal 0 then no permissions are set.
		</Word>
		<Word name="sensor" args="integer total_number">
			sensor(integer total_number)

			This event is raised whenever objects matching the constraints 
			of the llSensor command are detected. 
			The number of detected objects is passed to the script 
			in the total_number parameter. Information on those
			objects may be gathered via the llDetected* library functions.
		</Word>
		<Word name="state_entry">
			state_entry()

			The state_entry event occurs whenever a new state is entered,
			including program start,and is always the first event handled.
		</Word>
		<Word name="state_exit">
			state_exit()

			The state_exit event occurs whenever the state command 
			is used to transition to another state. It is handled
			before the new states state_entry event.
		</Word>
		<Word name="timer">
			timer()

			This event is raised at regular intervals set by the 
			llSetTimerEvent library function.
		</Word>
		<Word name="touch" args="integer total_number">
			touch(integer total_number)

			This event is raised while a user is touching the object 
			the script is attached to. The number of touching objects is
			passed to the script in the total_number parameter. 
			Information on those objects may be gathered via the
			llDetected* library functions.
		</Word>
		<Word name="touch_start" args="integer total_number">
			touch_start(integer total_number)

			This event is raised when a user first touches the object the script is
			attached to. The number of touching objects is passed to the script in
			the total_number parameter. Information on those objects may be gathered
			via the llDetected() library functions.
		</Word>
		<Word name="touch_end" args="integer total_number">
			touch_end(integer total_number)

			This event is raised when a user stops touching the object 
			the script is attached to. The number of touching
			objects is passed to the script in the total_number parameter. 
			Information on those objects may be gathered
			via the llDetected* library functions.
		</Word>
		<Word name="http_response" args="key request_id,integer status,list metadata,string body">
			http_response(key request_id,integer status,list metadata,string body)

			This event handler is invoked when an HTTP response is received for 
			a pending llHTTPRequest request or if a pending request fails or times out.
		</Word>
		<Word name="remote_data" args="integer event_type,key channel,key message_id,string sender,integer idata,string sdata">
			remote_data(integer event_type,key channel,key message_id,string sender,integer idata,string sdata)

			Triggered by various XML-RPC calls with event_type specifying the type of data.
		</Word>
	</Words>
	<Words  name="Names" icon="1">
		<Word name="aim_l_bow"/>
		<Word name="aim_r_bazooka"/>
		<Word name="aim_r_handgun"/>
		<Word name="aim_r_rifle"/>
		<Word name="angry_fingerwag"/>
		<Word name="angry_tantrum"/>
		<Word name="away"/>
		<Word name="backflip"/>
		<Word name="blowkiss"/>
		<Word name="bow"/>
		<Word name="brush"/>
		<Word name="busy"/>
		<Word name="clap"/>
		<Word name="courtbow"/>
		<Word name="crouch"/>
		<Word name="crouchwalk"/>
		<Word name="dance1"/>
		<Word name="dance2"/>
		<Word name="dance3"/>
		<Word name="dance4"/>
		<Word name="dance5"/>
		<Word name="dance6"/>
		<Word name="dance7"/>
		<Word name="dance8"/>
		<Word name="dead"/>
		<Word name="drink"/>
		<Word name="express_afraid"/>
		<Word name="express_afraid_emote"/>
		<Word name="express_anger"/>
		<Word name="express_anger_emote"/>
		<Word name="express_bored"/>
		<Word name="express_bored_emote"/>
		<Word name="express_cry"/>
		<Word name="express_cry_emote"/>
		<Word name="express_disdain"/>
		<Word name="express_embarrassed"/>
		<Word name="express_embarrassed_emote"/>
		<Word name="express_frown"/>
		<Word name="express_kiss"/>
		<Word name="express_laugh"/>
		<Word name="express_laugh_emote"/>
		<Word name="express_open_mouth"/>
		<Word name="express_repulsed"/>
		<Word name="express_repulsed_emote"/>
		<Word name="express_sad"/>
		<Word name="express_sad_emote"/>
		<Word name="express_shrug"/>
		<Word name="express_shrug_emote"/>
		<Word name="express_smile"/>
		<Word name="express_surprise"/>
		<Word name="express_surprise_emote"/>
		<Word name="express_tongue_out"/>
		<Word name="express_toothsmile"/>
		<Word name="express_wink"/>
		<Word name="express_wink_emote"/>
		<Word name="express_worry"/>
		<Word name="express_worry_emote"/>
		<Word name="falldown"/>
		<Word name="female_walk"/>
		<Word name="fist_pump"/>
		<Word name="fly"/>
		<Word name="flyslow"/>
		<Word name="hello"/>
		<Word name="hold_l_bow"/>
		<Word name="hold_r_bazooka"/>
		<Word name="hold_r_handgun"/>
		<Word name="hold_r_rifle"/>
		<Word name="hold_throw_r"/>
		<Word name="hover"/>
		<Word name="hover_down"/>
		<Word name="hover_up"/>
		<Word name="impatient"/>
		<Word name="jump " />
		<Word name="jumpforjoy"/>
		<Word name="kick_roundhouse_r"/>
		<Word name="kissmybutt"/>
		<Word name="land"/>
		<Word name="laugh_short"/>
		<Word name="motorcycle_sit"/>
		<Word name="musclebeach"/>
		<Word name="no_head"/>
		<Word name="no_unhappy"/>
		<Word name="nyanya"/>
		<Word name="peace"/>
		<Word name="point_me"/>
		<Word name="point_you"/>
		<Word name="prejump"/>
		<Word name="punch_l"/>
		<Word name="punch_onetwo"/>
		<Word name="punch_r"/>
		<Word name="rps_countdown"/>
		<Word name="rps_paper"/>
		<Word name="rps_rock"/>
		<Word name="rps_scissors"/>
		<Word name="run"/>
		<Word name="salute"/>
		<Word name="shoot_l_bow"/>
		<Word name="shout"/>
		<Word name="sit"/>
		<Word name="sit_female"/>
		<Word name="sit_generic"/>
		<Word name="sit_ground"/>
		<Word name="sit_to_stand"/>
		<Word name="sleep"/>
		<Word name="smoke_idle"/>
		<Word name="smoke_inhale"/>
		<Word name="smoke_throw_down"/>
		<Word name="snapshot"/>
		<Word name="soft_land"/>
		<Word name="stand"/>
		<Word name="stand_1"/>
		<Word name="stand_2"/>
		<Word name="stand_3"/>
		<Word name="stand_4"/>
		<Word name="standup"/>
		<Word name="stretch"/>
		<Word name="stride"/>
		<Word name="surf"/>
		<Word name="sword_strike_r"/>
		<Word name="talk"/>
		<Word name="throw_r"/>
		<Word name="tryon_shirt"/>
		<Word name="turn_180"/>
		<Word name="turnback_180"/>
		<Word name="turnleft"/>
		<Word name="turnright"/>
		<Word name="type"/>
		<Word name="walk"/>
		<Word name="whisper"/>
		<Word name="whistle"/>
		<Word name="wink_hollywood"/>
		<Word name="yes_happy"/>
		<Word name="yes_head"/>
		<Word name="yoga_float"/>
	</Words>
	<Words name="Functions" icon="4" color="#A00000">Complete listing of the Linden Library function calls available in lsl.
		<Word name="Set Var">
		</Word>
		<Word name="(integer)" type="integer" args="all val">
		Returns the integer value of val.</Word>
		<Word name="(float)" type="float" args="all val">
		Returns the float value of val.</Word>
		<Word name="(vector)" type="vector" args="all val">
		Returns the vector value of val.</Word>
		<Word name="(rotation)" type="rotation" args="all val">
		Returns the rotation value of val.</Word>
		<Word name="(key)" type="key" args="all val">
		Returns the key value of val.</Word>
		<Word name="(string)" type="string" args="all val">
		Returns the string value of val.</Word>
		<Word name="(list)" type="list" args="all val">
		Returns the list value of val.</Word>
		<Word name="llAbs" type="integer" args="integer val">
			Returns the absolute value of val.
</Word>
		<Word name="llAcos" type="float" args="float val">
			Returns the arccosine in radians of val.
</Word>
		<Word name="llAddToLandPassList" args="key avatar,float hours">
			Add avatar to the land pass list for hours.
</Word>
		<Word name="llAdjustSoundVolume" args="float volume">
			Adjusts the volume of the currently playing attached sound started
			with llPlaySound or llLoopSound.
			This function Has no effect on sounds started with llTriggerSound.
</Word>
		<Word name="llAllowInventoryDrop" args="integer add">
			If add == TRUE,users that do no have object modify permissions can
			still drop inventory items onto object.
</Word>
		<Word name="llAngleBetween" type="float" args="rotation a,rotation b">
			Returns the angle in radians between rotations a and b.
</Word>
		<Word name="llApplyImpulse" args="vector force,integer local">
			Applies the impulse in local coordinates if local == TRUE.
			Otherwise the impulse is applied in global coordinates.
			This function only works on physical objects.
</Word>
		<Word name="llApplyRotationalImpulse" args="vector force,integer local">
			Applies a rotational impulse force in local coordinates if local == TRUE.
			Otherwise the impulse is applied in global coordinates.
			This function only works on physical objects.
</Word>
		<Word name="llAsin" type="float" args="float val">
			Returns the arcsine in radians of val.
</Word>
		<Word name="llAtan2" type="float" args="float y,float x">
			returns the arctangent2 of y,x
</Word>
		<Word name="llAttachToAvatar" args="integer attachment">
			Attach to avatar at point attachment.
			Requires the PERMISSION_ATTACH runtime permission.
		</Word>
		<Word name="llAvatarOnSitTarget" type="key">
			If an avatar is sitting on the sit target,return the avatars key,
			NULL_KEY otherwise. This only will detect
			avatars sitting on sit targets defined with llSitTarget.
</Word>
		<Word name="llAxes2Rot" type="rotation" args="vector fwd,vector left,vector up">
			Returns the rotation represented by coordinate axes fwd,left,and up.
</Word>
		<Word name="llAxisAngle2Rot" type="rotation" args="vector axis,float angle">
			Returns the rotation generated angle about axis.
</Word>
		<Word name="llBreakAllLinks">
			Delinks all objects in the link set.
			Requires the permission PERMISSION_CHANGE_LINKS be set.
</Word>
		<Word name="llBreakLink" args="integer linknum">
			Delinks the object with the given link number.
			Requires permission PERMISSION_CHANGE_LINKS be set.
</Word>
		<Word name="llCSV2List" type="list" args="string src">
			Create a list from a string of comma separated values specified in src.
</Word>
		<Word name="llCeil" type="integer" args="float val">
			Returns largest integer value &gt;= val.
</Word>
		<Word name="llCloud" type="float" args="vector offset">
			Returns the cloud density at the object position + offset.
</Word>
		<Word name="llCollisionFilter" args="string name,key id,iteger accept">
			If accept == TRUE,only accept collisions with objects name and id,
			otherwise with objects not name or id.
			Specify an empty string or NULL_KEY to not filter
			on the corresponding parameter.
</Word>
		<Word name="llCollisionSound" args="string impact_sound,float impact_volume">
			Suppress default collision sounds,replace default impact sounds
			with impact_sound found in the object inventory.
			Supply an empty string to suppress collision sounds.
</Word>
		<Word name="llCollisionSprite" args="string impact_sprite">
			Suppress default collision sprites,replace default impact sprite
			with impact_sprite found in the object inventory.
			Supply an empty string to just suppress.
</Word>
		<Word name="llCos" type="float" args="float theta">
			Returns the cosine of thetaradians.
</Word>
		<Word name="llCreateLink" args="key target,integer parent">
			Attempt to link object script is attached to and target.
			Requires permission PERMISSION_CHANGE_LINKS be set.
			If parent== TRUE,object script is attached to is the root.
		</Word>
		<Word name="llDeleteSubList" type="list" args="list src,integer start,integer end">
			Remove the slice from the list and return the remainder.
			The start and end are inclusive,so 0,length -1 would delete the
			entire list and 0,0 would delete the first list entry.
			Using negative numbers for start and/or end causes the index to count
			backwards from the length of the list,so 0,-1 would delete the entire
			list. If start is larger than end the list deleted is the exclusion
			of the entries,so 6,4 would delete the entire list except
			for the 5th list entry.
</Word>
		<Word name="llDeleteSubString" type="string" args="string src,integer start,integer end">
			Removes the indicated substring and returns the result.
			The start and end are inclusive,so 0,length-1 would
			delete the entire string and 0,0 would delete the first character.
			Using negative numbers for start and/or end causes the index to
			count backwards from the length of the string,so 0,-1 would
			delete the entire string. If start is larger than end the sub string
			is the exclusion of the entries,so 6,4 would delete the entire string
			except for the 5th character.
</Word>
		<Word name="llDetachFromAvatar">
			Drop off of avatar.
</Word>
		<Word name="llDetectedGrab" type="vector" args="integer number">
			Returns the grab offset of detected object number.
			Returns &lt;0,0,0&gt; if number is not valid sensed object.
</Word>
		<Word name="llDetectedKey" type="key" args="integer number">
			Returns the key of detected object number.
			Returns NULL_KEY if number is not valid sensed object.
</Word>
		<Word name="llDetectedLinkNumber" type="integer" args="integer number">
			Returns the link position of the triggered event for touches.
			0 for a non-linked object,1 for the root of a linked
			object,2 for the first child,etc.
</Word>
		<Word name="llDetectedName" type="string" args="integer number">
			Returns the name of detected object number.
			Returns empty string if number is not valid sensed object.
</Word>
		<Word name="llDetectedOwner" type="key" args="integer number">
			Returns the key of detected number objects owner.
			Returns invalid key if number is not valid sensed object.
</Word>
		<Word name="llDetectedPos" type="vector" args="integer number">
			Returns the position of detected object number.
			Returns &lt;0,0,0&gt; if number is not valid sensed object.
</Word>
		<Word name="llDetectedRot" type="rotation" args="integer number">
			Returns the rotation of detected object number.
			Returns &lt;0,0,0,1&gt; if number is not valid sensed object.
</Word>
		<Word name="llDetectedType" type="integer" args="integer number">
			Returns the type (AGENT,ACTIVE,PASSIVE,SCRIPTED) of detected object
			number. Returns 0 if number is not valid sensed object.
			Note that number is a bitfield,so comparisons need to be a bitwise
			and check. eg:
			integer type = llDetectedType(0)
			if (type  and  AGENT)
			{
				// ...do stuff with the agent
			}
</Word>
		<Word name="llDetectedVel" type="vector" args="integer number">
			Returns the velocity of detected object number 
			(returns &lt;0,0,0&gt; if number is not valid sensed object).
</Word>
		<Word name="llDialog" args="key avatar,string message,list buttons,integer channel">
			Opens a &quot;notify box&quot; in the top-right corner of the given avatars
			screen displaying the message. Up to four
			buttons can be specified in a list of strings. When the player
			clicks a button,the name of the button is chatted on
			the specified channel. Channels work just like llSay(),
			so channel 0 can be heard by everyone. The chat
			originates at the objects position,not the avatars position. e.g.
			llDialog(who,&quot;Are you a boy or a girl?&quot;,[ &quot;Boy&quot;,&quot;Girl&quot; ],4913)
			llDialog(who,&quot;This shows only an OK button.&quot;,[],192)
			llDialog(who,&quot;This chats so you can hear it.&quot;,[&quot;Hooray&quot;],0)
</Word>
		<Word name="llDie">
			Delete the object which holds the script.
</Word>
		<Word name="llDumpList2String" type="string" args="list src,string separator">
			Write the list out in a single string using separator between values.
</Word>
		<Word name="llEdgeOfWorld" type="integer" args="vector pos,vector dir">
			Returns TRUE if the line along dir from poshits the edge
			of the world in the current simulator and returns
			FALSE if that edge crosses into another simulator.
</Word>
		<Word name="llEjectFromLand" args="key pest">
			Ejects pestfrom land that you own.
</Word>
		<Word name="llEmail" args="string address,string subject,string message">
			Sends email to addresswith subjectand message.
</Word>
		<Word name="llEuler2Rot" type="rotation" args="vector vec">
			Returns the rotation represented by Euler Angle vec.
</Word>
		<Word name="llFabs" type="float" args="float val">
			Returns the absolute value of val.
</Word>
		<Word name="llFloor" type="integer" args="float val">
			Returns largest integer value&lt;= val.
</Word>
		<Word name="llFrand" type="float" args="float mag">
			Returns a pseudo-random number between [0,mag).
</Word>
		<Word name="llGetAccel" type="vector">
			Gets the acceleration.
</Word>
		<Word name="llGetAttached" type="integer">
			Returns the object attachment point or 0 if not attached.
</Word>
		<Word name="llGetAgentInfo" type="integer" args="key id">
			Returns information about the given agent id. Returns a bitfield
			of agent info constants.
</Word>
		<Word name="llGetAgentSize" type="vector" args="key id">
			If the agent id is in the same sim as the object,returns
			the size of the avatar.
</Word>
		<Word name="llGetAlpha" type="float" args="integer face">
			Returns the alpha of the given face. If faceis ALL_SIDES
			the value returned is the mean average of all faces.
</Word>
		<Word name="llGetAndResetTime" type="float">
			Gets the time in seconds since creation and sets the time to zero.
</Word>
		<Word name="llGetAnimation" type="string" args="key id">
			Returns the currently playing animation for avatar id.
</Word>
		<Word name="llGetCenterOfMass" type="vector">
			Returns the center of mass of the root object.
</Word>
		<Word name="llGetColor" type="vector" args="integer face">
			Returns the color of face as a vector of red,green,and blue values
			between 0 and 1. If face is ALL_SIDES
			the color returned is the mean average of each channel.
</Word>
		<Word name="llGetDate" type="string">
			Returns the current UTC date as YYYY-MM-DD.
</Word>
		<Word name="llGetEnergy" type="float">
			Returns how much energy is in the object as a percentage of maximum.
</Word>
		<Word name="llGetForce" type="vector">
			Returns the current force if the script is physical.
</Word>
		<Word name="llGetFreeMemory" type="integer">
			Returns the available heap space for the current script.
</Word>
		<Word name="llGetInventoryKey" type="key" args="string name">
			Returns the key of the inventory name.
</Word>
		<Word name="llGetInventoryName" type="string" args="integer type,integer number">
			Get the name of the inventory item number of type.
			Use the inventory constants to specify the type.
		</Word>
		<Word name="llGetInventoryNumber" type="integer" args="integer type">
			Get the number of items of type in the object inventory.
			Use the inventory constants to specify the type.
		</Word>
		<Word name="llGetKey" type="key">
			Get the key for the object which has this script.
</Word>
		<Word name="llGetLandOwnerAt" type="key" args="vector pos">
			Returns the key of the land owner at posor NULL_KEY if public.
</Word>
		<Word name="llGetLinkKey" type="key" args="integer linknum">
			Returns the key of linknumin the link set.
</Word>
		<Word name="llGetLinkName" type="string" args="integer linknum">
			Returns the name of linknumin the link set.
</Word>
		<Word name="llGetLinkNumber" type="integer">
			Returns what link number in a link set the for the object
			which has this script. 0 means no link,1 the root,2 for
			first child,etc.
</Word>
		<Word name="llGetListEntryType" type="integer" args="list src,integer index">
			Returns the type of the variable at index in src.
</Word>
		<Word name="llGetListLength" type="integer" args="list src">
			Returns the number of elements in src.
</Word>
		<Word name="llGetLocalPos" type="vector">
			Returns the local position of a child object relative to the root.
</Word>
		<Word name="llGetLocalRot" type="rotation">
			Returns the local rotation of a child object relative to the root.
</Word>
		<Word name="llGetNextEmail" args="string address,string subject">
			Get the next waiting email with appropriate addressand/or subject.
			If the parameters are blank,they are not used for filtering.
</Word>
		<Word name="llGetNotecardLine" type="key" args="string name,integer line">
			This function fetches line number line of notecard name and returns
			the data through the dataserver event. The line count starts at zero.
			If the requested line is past the end of the notecard the dataserver
			event will return the constant EOF string.
			The key returned by this function is a unique identifier which will
			be supplied to the dataserver event in the requested parameter.
</Word>
		<Word name="llGetNumberOfSides" type="integer">
			Returns the number of sides of the current object which has the script.
</Word>
		<Word name="llGetObjectName" type="string">
			Returns the name of the object which has the script.
</Word>
		<Word name="llGetObjectPrimCount" type="integer" args="key id">
			Returns the prim count for any object id in the same sim.
</Word>
		<Word name="llGetOmega" type="vector">
			Returns the omega.
</Word>
		<Word name="llGetOwner" type="key">
			Returns the owner of the object.
</Word>
		<Word name="llGetOwnerKey" type="key" args="key id">
			Returns the owner of object id.
</Word>
		<Word name="llGetParcelMaxPrims" type="integer" args="vector pos,integer sim_wide"/>
		<Word name="llGetParcelPrimCount" type="integer" args="vector pos,integer category,integer sim_wide">
			Returns the number of prims used on the parcel at pos which are in category.

			If sim_wide is TRUE,it returns the number of objects
			for the entire sim in the category specified.
			If sim_wide is FALSE,it returns the number of objects
			on this specific parcel in the category specified
		</Word>
		<Word name="llGetParcelPrimOwners" type="list" args="vector pos">
			Returns a strided list of keys and integers of up to 100 
			agents who own objects in the parcel at pos. 
			The list is formatted as 
				[ key agentKey1,integer agentCount1,key agentKey2,integer agentCount2,... ],
			sorted by agent key.
			The integers are counts of the number of prims (not objects) 
			owned by the corresponding agents.
			Sleeps the script for 2.0 seconds.
			Function only works when the object owner is in the sim 
					 (likely the reason it doesn&apos;t work when deeded to group).
</Word>
		<Word name="llGetPermissions" type="integer">
			Returns what permissions have been enabled.eg:

			integer perm = llGetPermissions()
			if((perm  and  PERMISSION_DEBIT) == PERMISSION_DEBIT)
			{
				// code goes here
			}
</Word>
		<Word name="llGetPermissionsKey" type="key">
			Returns avatar that has enabled permissions.
			Returns NULL_KEY if not enabled.
</Word>
		<Word name="llGetPos" type="vector">
			Returns the position.
</Word>
		<Word name="llGetRegionFPS">
			Returns the mean region frames per second.
</Word>
		<Word name="llGetRegionName" type="string">
			Returns the current region name.
</Word>
		<Word name="llGetRegionTimeDilation" type="float">
			Returns the current time dilation as a float between 0 and 1.
</Word>
		<Word name="llGetRot" type="rotation">
			Returns the rotation.
</Word>
		<Word name="llGetScale" type="vector">
			Returns the scale.
</Word>
		<Word name="llGetScriptName" type="string">
			Returns the name of this script.
</Word>
		<Word name="llGetStartParameter" type="integer">
			Returns the start parameter passed to llRezObject.
			If the object was created from agent inventory,this function
			returns 0.
</Word>
		<Word name="llGetScriptState" type="integer" args="string name">
			Resets TRUE if script nameis running
</Word>
		<Word name="llGetStatus" type="integer" args="integer status">
			Returns the value of status.
			The value will be one of the status constants.
</Word>
		<Word name="llGetSubString" type="string" args="string src,integer start,integer end">
			Returns the indicated substring from src. The startand end are
			inclusive,so 0,length-1 would capture the entire string and 0,0
			would capture the first character. Using negative numbers for
			start and/or end causes the index to count backwards from the length
			of the string,so 0,-1 would capture the entire string.
			If start is larger than end the sub string is the exclusion of the
			entries,so 6,4 would give the entire string
			except for the 5th character.
</Word>
		<Word name="llGetSunDirection" type="vector">
			Returns the sun direction on the simulator.
</Word>
		<Word name="llGetTexture" type="string" args="integer face">
			Returns the texture of faceif it is found in object inventory.
</Word>
		<Word name="llGetTextureOffset" type="vector" args="integer side">
			Returns the texture offset of sidein the x and y components of a vector.
</Word>
		<Word name="llGetTextureRot" type="float" args="integer side">
			Returns the texture rotation of side.
</Word>
		<Word name="llGetTextureScale" type="vector" args="integer side">
			Returns the texture scale of sidein the x and y components of a vector.
</Word>
		<Word name="llGetTime" type="float">
			Returns the time in seconds since creation of this script.
</Word>
		<Word name="llGetTimeOfDay" type="float">
			Gets the time in seconds since midnight in Second Life.
</Word>
		<Word name="llGetTorque" type="vector">
			Returns the torque if the script is physical.
</Word>
		<Word name="llGetVel" type="vector">
			Returns the velocity.
</Word>
		<Word name="llGetWallclock" type="float">
			Returns the time in seconds since simulator timezone midnight.
</Word>
		<Word name="llGiveInventory" args="key destination,string inventory">
			Give the named inventory item to the keyed avatar or object in the
			same simulator as the giver. If the recipient is an avatar,
			the avatar then follows the normal procedure of accepting
			or denying the offer. If the recipient is an object,
			the same permissions apply as if you were dragging inventory
			onto the object by hand,ie if llAllowInventoryDrop has been called
			with TRUE,any other object can pass objects to its inventory.
</Word>
		<Word name="llGiveInventoryList" args="key destination,string category,list inventory">
			Give the list of named inventory items to the keyed avatar or object
			in the same simulator as the giver. If the recipient is an avatar,
			the avatar then follows the normal procedure of accepting or denying
			the offer. The offered inventory is then placed in a folder named
			category in the recipients inventory. If the recipient is an object,
			the same permissions apply as if you were dragging inventory onto the
			object by hand,ie if llAllowInventoryDrop has been called with TRUE,
			any other object can pass objects to its inventory.If the
			recipient is an object,the category parameter is ignored.
</Word>
		<Word name="llGiveMoney" args="key destination,integer amount">
			Transfer amountfrom the script owner to destination.
			This call will fail if PERMISSION_DEBIT has not been set.
</Word>
		<Word name="llGround" type="float" args="vector offset">
			Retuns the ground hieght at the object position + offset.
</Word>
		<Word name="llGroundContour" type="vector" args="vector offset">
			Retuns the ground contour at the object position + offset.
</Word>
		<Word name="llGroundNormal" type="vector" args="vector offset">
			Retuns the ground contour at the object position + offset.
</Word>
		<Word name="llGroundRepel" args="float height,integer water,float tau">
			Critically damps to heightif within height* 0.5 of level.
			The heightis above ground level if water
			is FALSE or above the higher of land and water if water is TRUE.
</Word>
		<Word name="llGroundSlope" type="vector" args="vector offset">
			Returns the ground slope at the object position + offset.
</Word>
		<Word name="llInsertString" type="string" args="string dst,integer position,string src">
			Inserts src into dst at position and returns the result.
</Word>
		<Word name="llInstantMessage" args="key user,string message">
			Send messageto the user as an instant message.
</Word>
		<Word name="llKey2Name" type="string" args="key id">
			If object id is in the same simulator,return the name of the object.
</Word>
		<Word name="llList2CSV" type="string" args="list src">
			Create a string of comma separated values from list.
</Word>
		<Word name="llList2Float" type="float" args="list src,integer index">
			Returns the float at index in the list src.
</Word>
		<Word name="llList2Integer" type="integer" args="list src,integer index">
			Returns the integer at index in the list src.
</Word>
		<Word name="llList2Key" type="key" args="list src,integer index">
			Returns the key at index in the list src.
</Word>
		<Word name="llList2List" type="list" args="list src,integer start,integer end">
			Returns the slice of the list from startto end from the list
			srcas a new list. The startand end parameters
			are inclusive,so 0,length-1 would copy the entire list and 0,0
			would capture the first list entry. Using negative
			numbers for startand/or end causes the index to count backwards
			from the length of the list,so 0,-1 would
			capture the entire list. If startis larger than end the list
			returned is the exclusion of the entries,so 6,4 would
			give the entire list except for the 5th entry.
</Word>
		<Word name="llList2ListStrided" type="list" args="list src,integer start,integer end,integer stride">
			Copy the strided slice of src from start to end.
</Word>
		<Word name="llList2Rot" type="rotation" args="list src,integer index">
			Returns the rotation at index in src.
</Word>
		<Word name="llList2String" type="string" args="list src,integer index">
			Returns the string at index in src.
</Word>
		<Word name="llList2Vector" args="list src,integer index">
			Returns the vector at index in src.
</Word>
		<Word name="llListFindList" type="integer" args="list src,list test">
			Returns the position of the first instance of testin src.
			Returns -1 if test is not in src.
</Word>
		<Word name="llListInsertList" type="list" args="list dest,list src,integer pos">
			Returns the list created by inserting src into dest at pos.
</Word>
		<Word name="llListRandomize" type="list" args="list src,integer stride">
			Returns srcrandomized into blocks of size stride.
			If the length of srcdividided by strideis non-zero,
			this function does not randomize the list.
</Word>
		<Word name="llListSort" type="list" args="list src,integer stride,integer ascending">
			Returns src sorted into blocks of stride in ascending order if
			ascending is TRUE. Note that sort only
			works in the head of each sort block is the same type.
		</Word>
		<Word name="llListen" type="integer" args="integer channel,string name,key id,string msg">
			Sets a listen event callback for msg on channel from name and
			returns an identifier that can be used to
			deactivate or remove the listen. The name,id and/or msg parameters
			can be blank to indicate not to filter on
			that argument. Channel 0 is the public chat channel that all avatars
			see as chat text. Channels 1 to 2,147,483,648
			are hidden channels that are not sent to avatars.
</Word>
		<Word name="llListenControl" args="integer number,integer active">
			Make a listen event callback active or inactive. Pass in the value
			returned from llListen to the number parameter
			to specify which event you are controlling. 
			Use boolean values to spcify active
</Word>
		<Word name="llListenRemove" args="integer number">
			Removes a listen event callback. Pass in the value returned from
			llListen to the number parameter to specify
			which event you are removing.
</Word>
		<Word name="llLookAt" args="vector target,float strength,float damping">
			Cause object to point the forward axis toward target.
			Good strengthvalues are around half the mass of the
			object and good damping values are less than 1/10th of the strength.
			Asymmetrical shapes require smaller
			damping. A strength of 0.0 cancels the look at.
</Word>
		<Word name="llLoopSound" args="string sound,flaot volume">
			Similar to llPlaySound,this function plays a sound attached to an
			object,but will continuously loop that sound
			until llStopSound or llPlaySound is called. Only one sound may be
			attached to an object at a time. A second call
			to llLoopSound with the same key will not restart the sound,but the
			new volume will be used. This allows
			control over the volume of already playing sounds. Setting the
			volumeto 0 is not the same as calling
			llStopSound a sound with 0 volume will continue to loop. 
			To restart the sound from the beginning,call
			llStopSound before calling llLoopSound again.
</Word>
		<Word name="llLoopSoundMaster" args="string sound,flaot volume">
			Behaviour is identical to llLoopSound,with the addition of marking
			the source as a &quot;Sync Master&quot;,causing
			&quot;Slave&quot; sounds to sync to it. If there are multiple masters within
			a viewers interest area,the most audible one (a
			function of both distance and volume) will win out as the master.
			The use of multiple masters within a small area
			is unlikely to produce the desired effect.
</Word>
		<Word name="llLoopSoundSlave" args="string sound,flaot volume">
			Behaviour is identical to llLoopSound,
			unless there is a &quot;Sync Master&quot; present. If a Sync Master is already
			playing the Slave sound will begin playing from the same point
			the master is in its loop syncronizing the loop
			points of both sounds. If a Sync Master is started when the Slave
			is already playing,the Slave will skip to the
			correct position to sync with the Master.
</Word>
		<Word name="llMakeExplosion" args="integer particles,float scale,float velocity,float lifetime,float arc,string texture,vector offset">
			Make a round explosion of particles using texture from the objects inventory.
</Word>
		<Word name="llMakeFire" args="integer particles,float scale,float velocity,float lifetime,float arc,string texture,vector offset">
			Make fire particles using texturefrom the objects inventory.
</Word>
		<Word name="llMakeFountain" args="integer particles,float scale,float velocity,float lifetime,float arc,string texture,vector offset">
			Make a fountain of particles using texturefrom the objects inventory.
</Word>
		<Word name="llMakeSmoke" args="integer particles,float scale,float velocity,float lifetime,float arc,string texture,vector offset">
			Make smoky particles using texturefrom the objects inventory.
</Word>
		<Word name="llMessageLinked" args="integer linknum,integer num,string str,key id">
			Sends num,str,and id to members of the link set.
			The linknumparameter is either the linked number
			available through llGetLinkNumber or a link constant.
</Word>
		<Word name="llMinEventDelay" args="float delay">
			Set the minimum time between events being handled.
</Word>
		<Word name="llModifyLand" args="integer action,integer size">
			Modify land with action on size area.
			The parameters can be chosen from the land constants.
		</Word>
		<Word name="llMoveToTarget" args="vector target,float tau">
			Critically damp to position targetin tau-seconds if the
			script is physical. Good tau-values are greater than 0.2. 
			A tau of 0.0 stops the critical damping.
</Word>
		<Word name="llOffsetTexture" args="float offset_s,float offset_t,integer face">
			Sets the texture s and t offsets of face. 
			If faceis ALL_SIDES this function sets the texture offsets for 
			all faces.
</Word>
		<Word name="llOverMyLand" type="integer" args="key id">
			Returns TRUE if id is over land owned by the object owner,
			FALSE otherwise.
</Word>
		<Word name="llParseString2List" type="list" args="string src,list separators,list spacers">
			Breaks src into a list,discarding anything in separators,
			keeping any entry in spacers. The
			separators and spacers must be lists of strings with a maximum 
			of 8 entries each. So,if you had made the
			call:
			llParseString2List(&quot;Parsethisnow! I dare:you to.&quot;,[&quot;this&quot;,&quot;!&quot;,&quot; &quot;],[&quot;:&quot;])
			You would get the list:
			[&quot;Parse&quot;,&quot;now&quot;,&quot;I&quot;,&quot;dare&quot;,&quot;:&quot;,&quot;you&quot;,&quot;to&quot;]
</Word>
		<Word name="llParticleSystem" args="list parameters">
			Makes a particle system based on the parameter list. 
			The parametersare specified as an ordered list of
			parameter and value. Valid parameters and their expected 
			values can be found in the particle system constants.
			Here is a simple example:
			llParticleSystem([PSYS_PART_FLAGS,PSYS_PART_WIND_MASK,
			PSYS_PART_START_COLOR,&lt;1,0,0&gt;,
			PSYS_SRC_PATTERN,PSYS_SRC_PATTERN_EXPLODE])
</Word>
		<Word name="llPassCollisions" args="integer pass">
			If passis TRUE,land and object collisions are passed from 
			children on to parents.
</Word>
		<Word name="llPassTouches" args="integer pass">
			If passis TRUE,touches are passed from children on to parents.
</Word>
		<Word name="llPlaySound" args="string sound,float volume">
			Plays a sound once. The sound will be attached to an object and 
			follow object movement. Only one sound may
			be attached to an object at a time,and attaching a new sound or 
			calling llStopSound will stop the previously
			attached sound. A second call to llPlaySound with the same sound 
			will not restart the sound,but the new
			volume will be used,which allows control over the volume 
			of already playing sounds. To restart the sound from
			the beginning,call llStopSound before calling llPlaySound again.
</Word>
		<Word name="llPlaySoundSlave" args="string sound,float volume">
			Behaviour is identical to llPlaySound,unless there is 
			a &quot;Sync Master&quot; present. If a Sync Master is already
			playing the Slave sound will not be played until the Master 
			hits its loop point and returns to the beginning.
			llPlaySoundSlave will play the sound exactly once if it is 
			desired to have the sound play every time the Master
			loops,either use llLoopSoundSlave with extra silence padded 
			on the end of the sound or ensure that
			llPlaySoundSlave is called at least once per loop of the Master.
</Word>
		<Word name="llPointAt" args="vector pos">
			Make avatar that owns object point at pos.
</Word>
		<Word name="llPow" args="float base,float exp">
			Returns baseraised to the exp.
</Word>
		<Word name="llPreloadSound" args="string sound">
			Preloads sound from object inventory on nearby viewers.
</Word>
		<Word name="llPushObject" args="key id,vector impulse,vector angular_impulse,integer local">
			Applies impulseand angular_impulseto object id.
</Word>
		<Word name="llReleaseControls" args="key avatar">
			Stop taking inputs from avatar.
</Word>
		<Word name="llRemoteLoadScript" args="key target,string name,integer running,integer param">
			If the owner of the object this script is attached can modify target
			and the objects are in the same region,copy
			script nameonto target,if running == TRUE,start the script with param.
			If namealready exists on target,it is replaced.
</Word>
		<Word name="llRemoveInventory" args="string inventory">
			Remve the name inventory item from the object inventory.
</Word>
		<Word name="llRemoveVehicleFlags" args="integer flags">
			Sets the vehicle flagsto FALSE. Valid parameters can be found in the vehicle flags constants section.
</Word>
		<Word name="llRequestAgentData" type="key" args="key id,integer data">
			This function requests data about agent id. If and when the information
			is collected,the dataserver event is
			called with the returned key returned from this function passed in
			the requested parameter. See the agent data
			constants for details about valid values of dataand what each will 
			return in the dataserver event.
</Word>
		<Word name="llRequestInventoryData" type="key" args="string name">
			Requests data from object inventory item name. When data is available 
			the dataserver event will be raised with
			the key returned from this function in the requested parameter. 
			The only request currently implemented is to
			request data from landmarks,where the data returned is in the 
			form &quot;&lt;float,float,float&gt;&quot; which can be cast to a
			vector. This position is in region local coordinates.
</Word>
		<Word name="llRequestPermissions" args="key avatar,iteger perm">
			Ask avatar to allow the script to do perm. The permparameter should 
			be a permission constant. Multiple
			permissions can be requested simultaneously by oring the 
			constants together. Many of the permissions requests
			can only go to object owner. This call will not stop script 
			execution -if the specified avatar grants the requested
			permissions,the run_time_permissions event will be called.
</Word>
		<Word name="llResetScript">
			Resets this script.
</Word>
		<Word name="llResetOtherScript" args="string name">
			Resets the script name.
</Word>
		<Word name="llResetTime">
			Sets the internal timer to zero.
</Word>
		<Word name="llRezObject" args="string inventory,vector pos,vector vel,rotation rot,integer param">
			Creates objects inventory object at position poswith velocity 
			veland rotation rot. The paramvalue
			will be available to the newly created object in the on_rez 
			event or through the llGetStartParameter library
			function. The velparameter is ignored if the rezzed object 
			is not physical.
</Word>
		<Word name="llRot2Angle" type="float" args="rotation rot">
			Returns the rotation angle represented by rot.
</Word>
		<Word name="llRot2Axis" type="vector" args="rotation rot">
			Returns the rotation axis represented by rot.
</Word>
		<Word name="llRot2Euler" type="vector" args="rotation rot">
			Returns the Euler Angle representation of rot.
</Word>
		<Word name="llRot2Fwd" type="vector" args="rotation rot">
			Returns the forward axis represented by rot.
</Word>
		<Word name="llRot2Left" type="vector" args="rotation rot">
			Returns the left axis represented by rot.
</Word>
		<Word name="llRot2Up" type="vector" args="rotation rot">
			Returns the up axis represented by rot.
</Word>
		<Word name="llRotBetween" type="rotation" args="vector a,vector b">
			Returns the rotation needed to rotate ato b.
</Word>
		<Word name="llRotLookAt" args="rotation rot,float strength,float damping">
			Cause object to rotate to rot. Good strengthvalues are around 
			half the mass of the object and good
			damping values are less than 1/10th of the strength. 
			Asymmetrical shapes require smaller damping.A
			strengthof 0.0 cancels the look at.
</Word>
		<Word name="llRotTarget" type="integer" args="rotation rot,float error">
			Set object rotation within error of rotationas a rotational 
			target and return an integer number for the
			target. The number can be used in llRotTargetRemove.
</Word>
		<Word name="llRotTargetRemove" args="integer number">
			Remove rotational target number.
</Word>
		<Word name="llRotateTexture" args="float radians,integer face">
			Sets the texture rotation of faceto radians. 
			If faceALL_SIDES,rotate the texture of all faces.
</Word>
		<Word name="llRound" type="integer" args="float val">
			returns valrounded to the nearest integer.
</Word>
		<Word name="llSameGroup" type="integer" args="key id">
			Returns TRUE if the object or agen id is in the same simulator
			and has the same active group as this object.
			Otherwise,returns FALSE.
</Word>
		<Word name="llRegionSay" args="integer channel,string text">
			Says the string text on channel number channel that can be heard
			anywhere in the region by a script listening on channel.
		</Word>
		<Word name="llSay" args="integer channel,string text">
			<font color="red">Say text on channel.</font>
		</Word>
		<Word name="llScaleTexture" args="float horizontal,float vertical,integer side">
			Sets the horizontal and vertical repeats per face on side.
			If side == ALL_SIDES,all sides are set in one call.
			Negative values for horizontal and vertical will flip the texture.
</Word>
		<Word name="llScriptDanger" type="integer" args="vector pos">
			Returns true if pos is over public land,land that doesnt allow everyone
			to edit and build,or land that doesnt allow outside scripts.
</Word>
		<Word name="llSensor" args="string name,key id,integer type,float range,float arc">
			Performs a single scan for nameand id with typewithin 
			rangemeters and arcradians of forward vector.
			Specifying a blank name or NULL_KEY id will not filter 
			results for any particular name or id A range of 0.0
			does not perform a scan. The typeparameter should be an 
			object type constant vlaue.
</Word>
		<Word name="llSensorRemove">
			Removes the sensor.
</Word>
		<Word name="llSensorRepeat" args="string name,key id,integer type,float range,float arc,float rate">
			Performs a repeating sensor scan for name and id with type 
			(AGENT,ACTIVE,PASSIVE,and/or SCRIPTED) within range meters and arc 
			radians of forward vector (name and/or id can be empty or 0). 
			A range of 0.0m does perform a scan. The parameters have the same
			function as llSensor,except rate,which defines the number of 
			seconds between repeated sensor or no_sensor event calls.
</Word>
		<Word name="llSetAlpha" args="float alpha,integer face">
			Sets the alpha value for face. If face is ALL_SIDES,
			set the alpha to all faces. The alphavalue is interpreted
			as an opacity percentage -1.0 is fully opaque,and 0.2 is
			mostly transparent. This api will clamp alphavalues
			less 0.1 to .1 and greater than 1.0 to 1.
</Word>
		<Word name="llSetBuoyancy" args="float buoyancy">
			Set the object buoyancy. A value of 0 is none,
			less than 1.0 sinks,1.0 floats,and greater than 1.0 rises.
</Word>
		<Word name="llSetCameraAtOffset" args="vector offset">
			Sets the camera at offset used in this object 
			if an avatar sits on it.
</Word>
		<Word name="llSetCameraEyeOffset" args="vector offset">
			Sets the camera eye offset used in this object if an avatar sits on it.
</Word>
		<Word name="llSetColor" args="vector color,integer face">
			Sets the color of face. If face is ALL_SIDES,set the color to all faces.
</Word>
		<Word name="llSetDamage" args="float damage">
			Sets the amount of damage that will be done to an object 
			that this object hits. This object will be destoyed on
			damaging another object.
</Word>
		<Word name="llSetForce" args="vector force,integer local">
			If the object is physical,this function sets the force. 
			The vector is in loal coordinates if local is TRUE,global if
			FALSE.
</Word>
		<Word name="llSetForceAndTorque" args="vector force,vector torque,integer local">
			If the object is physical,this function sets the forceand 
			torque. The vectors are in loal coordinates if local is
			TRUE,global if FALSE.
</Word>
		<Word name="llSetHoverHeight" args="float height,float water,float tau">
			Critically damps to a height. The height is above ground 
			and water if water is TRUE.
</Word>
		<Word name="llSetLinkPrimitiveParams" args="integer linknumber,list rules">
			Sets the parameters (or properties) of any linked prim in none step
</Word>
		<Word name="llSetLinkTexture" args="integer linknumber,string texture,integer face">
			Sets the texture of linked prims
</Word>
		<Word name="llSetLinkColor" args="integer linknumber,vector color,integer face">
			Sets the color of the linked child specified by linknumber.
			A value of 0 means no link,1 the root,2 for first
			child,etc. If linknumber is ALL_SIDES,set the color 
			of all objects in the linked set. If faceis
			ALL_SIDES,set the color of all faces.
</Word>
		<Word name="llSetObjectName" args="string name">
			Sets the object name to name.
</Word>
		<Word name="llSetPos" args="vector pos">
			If the object is not physical,this function sets the position 
			in region coordinates. If the object is a child,the
			position is treated as root relative and the linked set is adjusted.
</Word>
		<Word name="llSetRot" args="rotation rot">
			If the object is not physical,this function sets the rotation. 
			If the object is a child,the position is treated as root
			relative and the linked set is adjusted.
</Word>
		<Word name="llSetScale" args="vector scale">
			Sets the object scale.
</Word>
		<Word name="llSetScriptState" args="string name,integer run">
			Control the state of a script on the object.
</Word>
		<Word name="llSetSitText" args="string text">
			Displays textrather than sit in viewer pie menu.
</Word>
		<Word name="llSetSoundQueueing" args="integer queue">
			Sets whether successive calls to llPlaySound,llLoopSound,
			etc.,(attached sounds) interrupt the playing sound.
			The default for objects is FALSE. Setting this value to 
			TRUE will make the sound wait until the current playing
			sound reaches its end. The queue is one level deep.
</Word>
		<Word name="llSetStatus" args="integer status,integer value">
			Sets the statusto value. Use status constants for the values of status.
</Word>
		<Word name="llSetText" args="string text,vector color,float alpha">
			Sets text that floats above object to text,
			using the specified color and alpha.
</Word>
		<Word name="llSetTexture" args="string texture,integer face">
			Sets the texturefrom object inventory of face. 
			If face is ALL_SIDES,set the texture to all faces.
</Word>
		<Word name="llSetTextureAnim" args="integer mode,integer face,integer sizex,integer sizey,float start,float length,float rate">
			Animates a texture by setting the texture scale and offset. 
			The mode is a mask of texture animation constants.
			You can only have one texture animation on an object,
			calling llSetTextureAnim more than once on an object
			will reset it.
			You can only do one traditional animation,ROTATE or SCALE 
			at a time,you cannot combine masks. In the case
			of ROTATE or SCALE,sizex and sizey are ignored,and startand 
			lengthare used as the start and
			length values of the animation. For rotation,startand lengthare 
			in radians.
			The facespecified which face to animate. If faceis ALL_SIDES,
			all textures on the object are animated.
			The sizex and sizey describe the layout of the frames within 
			the texture. sizex specifies how many
			horizontal frames and sizey is how many vertical frames.
			startis the frame number to begin the animation on. Frames 
			are numbered from left to right,top to bottom,
			starting at 0.
			lengthis the number of frames to animate. 0 means to animate 
			all frames after the start frame.
			rateis the frame rate to animate at. 1.0 means 1 frame per 
			second,10.0 means 10 frames per second,etc.
</Word>
		<Word name="llSetTimerEvent" args="float sec">
			Sets the timer event to be triggered every secseconds. 
			Passing in 0.0 stops further timer events.
</Word>
		<Word name="llSetTorque" args="vector torque,integer local">
			If the object is physical,this function sets the torque. 
			The vector is in loal coordinates if local is TRUE,global
			if FALSE.
</Word>
		<Word name="llSetTouchText" args="string text">
			Displays textin viewer pie menu that acts as a touch.
</Word>
		<Word name="llSetVehicleFlags" args="integer flags">
			Sets the vehicle flagsto TRUE. 
			Valid parameters can be found in the vehicle flags constants section.
</Word>
		<Word name="llSetVehicleFloatParam" args="integer param_name,float param_value">
			Sets the vehicle floating point parameter param_nameto param_value. 
			Valid parameters and their expected
			values can be found in the vehicle parameter constants section.
</Word>
		<Word name="llSetVehicleType" args="integer type">
			Activates the vehicle action and choose vehicle type. 
			Valid types and an explination of their characteristeics
			can be found in the vehicle type constants section.
</Word>
		<Word name="llSetVehicleRotationParam" args="integer param_name,rotation param_value">
			Sets the vehicle rotation parameter param_nameto param_value. 
			Valid parameters can be found in the
			vehicle parameter constants section.
</Word>
		<Word name="llSetVehicleVectorParam" args="integer param_name,vector param_value">
			Sets the vehicle vector parameter param_nameto param_value. 
			Valid parameters can be found in the
			vehicle paramter constants section.
</Word>
		<Word name="llShout" args="integer channel,string text">
			Shout texton channel. Channel 0 is the public chat channel that 
			all avatars see as chat text. Channels 1 to
			2,147,483,648 are private channels that are not sent to 
			avatars but other scripts can listen for through the llListen api.
</Word>
		<Word name="llSin" type="float" args="float theta">
			Returns the sine of thetain radians.
</Word>
		<Word name="llSitTarget" args="vector offset,rotation rot">
			Set the sit location for this object. If offset == ZERO_VECTOR 
			clear the sit target.
</Word>
		<Word name="llSleep" args="float sec">
			Puts the script to sleep for secseconds.
</Word>
		<Word name="llSqrt" type="float" args="float val">
			Returns the square root of val. If valis less than 0.0,
			this function returns 0.0 and raises a math runtime error.
</Word>
		<Word name="llStartAnimation" args="string anim">
			This function starts animation anim for the avatar that owns the object.
</Word>
		<Word name="llStopAnimation" args="string anim">
			Stop animation animfor avatar that owns object.
</Word>
		<Word name="llStopHover">
			Stop hover to a height.
</Word>
		<Word name="llStopLookAt">
			Stop causing object to look at target.
</Word>
		<Word name="llStopMoveToTarget">
			Stops critically damped motion.
</Word>
		<Word name="llStopPointAt">
			Stop avatar that owns object pointing.
</Word>
		<Word name="llStopSound">
			Stops a currently playing attached sound started with 
			llPlaySound or llLoopSound. Has no effect on sounds
			started with llTriggerSound.
</Word>
		<Word name="llStringLength" type="integer" args="string src">
			Returns the number of characters in src.
</Word>
		<Word name="llSubStringIndex" type="integer" args="string source,string pattern">
			Finds index in source where pattern first appears. 
			Returns -1 if no match is found found.
</Word>
		<Word name="llTakeControls" args="integer controls,integer accept,integer pass_on">
			If (accept== (controls and  input)),send input to object. 
			If the boolean pass_onis TRUE,also send input
			to avatar.
</Word>
		<Word name="llTan" type="float" args="float theta">
			Returns the tangent of thetaradians.
</Word>
		<Word name="llTarget" type="integer" args="vector position,float range">
			Set object position within rangeof positionas a target 
			and returns an integer ID for the target.
</Word>
		<Word name="llTargetOmega" args="vector axis,float spinrate,float gain">
			Attempt to spin at spinratewith strength gainon axis.
			A spinrateof 0.0 cancels the spin. This
			function always works in object local coordinates.
</Word>
		<Word name="llTargetRemove" args="integer tnumber">
			Remove target number tnumber.
</Word>
		<Word name="llTeleportAgentHome" args="key id">
			Teleport agent on the owners land to agents home location.
</Word>
		<Word name="llToLower" type="string" args="string src">
			Returns src in all lower case.
</Word>
		<Word name="llToUpper" type="string" args="string src">
			Returns src in all upper case.
</Word>
		<Word name="llTriggerSound" args="string sound,float volume">
			Plays a transient sound NOT attached to an object. 
			The sound plays from a stationary position located at the
			center of the object at the time of the trigger. 
			There is no limit to the number of triggered sounds which can be
			generated by an object,and calling llTriggerSound does not affect 
			the attached sounds created by llPlaySound
			and llLoopSound. This is very useful for things like collision noises,
			explosions,etc. There is no way to stop or
			alter the volume of a sound triggered by this function.
</Word>
		<Word name="llTriggerSoundLimited" args="string sound,float volume,vector tne,vector bsw">
			Plays a transient sound NOT attached to an object with its 
			audible range limited by the axis aligned bounding
			box define by tne(top-north-eash) and bsw (bottom-south-west). 
			The sound plays from a stationary position
			located at the center of the object at the time of the trigger. 
			There is no limit to the number of triggered sounds
			which can be generated by an object,and calling llTriggerSound 
			does not affect the attached sounds created by
			llPlaySound and llLoopSound. This is very useful for things 
			like collision noises,explosions,etc. There is no
			way to stop or alter the volume of a sound triggered by this function.
</Word>
		<Word name="llUnSit" args="key id">
			If agent identified by id is sitting on the object the script 
			is attached to or is over land owned by the objects
			owner,the agent is forced to stand up.
</Word>
		<Word name="llVecDist" type="float" args="vector a,vector b">
			Returns the distance from ato b
</Word>
		<Word name="llVecMag" type="float" args="vector vec">
			Returns the magnitude of vec.
</Word>
		<Word name="llVecNorm" type="vector" args="vector vec">
			Returns normalized vec.
</Word>
		<Word name="llVolumeDetect" args="integer detect">
			When detect = TRUE,this makes the entire link set the script 
			is attached to phantom but if another object
			interpenetrates it,it will get a collision_start event. 
			When an object stops interpenetrating,a collision_end event
			is generated. While the other is interpenetrating,
			collision events are NOT generated. The script must be applied
			to the root object of the link set to get the collision events. 
			Collision filters work normally.
</Word>
		<Word name="llWater" type="float" args="vector offset">
			Returns the water height at the object position + offset.
</Word>
		<Word name="llWhisper" args="integer channel,string text">
			Whisper texton channel. Channel 0 is the public chat channel that
			all avatars see as chat text. Channels 1 to 2,147,483,648 are
			private channels that are not sent to avatars but other scripts
			can listen for through the llListen api.
</Word>
		<Word name="llWind" type="vector" args="vector offset">
			Returns the wind velocity below the object position + offset.
</Word>
		<Word name="llAddToLandBanList" args="key agent,float hours">
			Adds agent to the parcel ban list for the specified number of hours.
			A value of 0 for hours will add agent indefinitely.
			The smallest value hours will accept is 0.01
			anything smaller will be seen as 0. 
			When values that small are used,it seems the function bans
			in 30 second increments (Probably 36 second increments,
			as 0.01 of an hour is 36 seconds).
			Residents teleporting to a parcel where they are banned
			will be redirected to a neighboring parcel.
</Word>
		<Word name="llBase64ToInteger" type="integer" args="string str">
			Little endian decode the 8 character Base64 string str into an integer.
</Word>
		<Word name="llBase64ToString" type="string" args="string str">
			Converts a Base 64 string to a conventional string.
			If the conversion creates any unprintable characters,they are converted to question marks (this behavior is different then llUnescapeURL).
</Word>
		<Word name="llClearCameraParams">
			Resets all camera parameters to default values and turns
			off scripted camera control.
</Word>
		<Word name="llCloseRemoteDataChannel" args="key channel">
			Closes XML-RPC channel.
</Word>
		<Word name="llDetectedGroup" type="integer" args="integer number">
			Returns TRUE if detected object or agent number has the same
			user group active as this object.
			It will return FALSE if the object or agent is in the group,
			but the group is not active.
</Word>
		<Word name="llEscapeURL" type="string" args="string url">
			Returns the string that is the URL-escaped version of url
			(replacing spaces with %20,etc).
			This function returns the UTF-8 encoded escape codes
			for selected characters.
</Word>
		<Word name="llForceMouselook" args="integer mouselook">
			After calling this function with mouselook set to TRUE,
			any agent sitting down on the prim will be forced into mouselook.
			Just like llSitTarget,this changes a permanent property
			of the prim (not the object) and needs to be reset by calling
			this function with mouselook set to FALSE in order to disable it.
</Word>
		<Word name="llGetAnimationList" type="list" args="key id">
			Returns a list of keys of all playing animations for avatar id.
</Word>
		<Word name="llGetBoundingBox" type="list" args="key object">
			Returns the bounding box around the object or avatar with
			the key object (including any linked prims) relative to the
			root prim,in a list: [ (vector) min_corner,(vector) max_corner ]
</Word>
		<Word name="llGetCameraPos" type="vector">			Returns the position of the camera of the user that granted the
			script PERMISSION_TRACK_CAMERA. If no user has granted the permission,
			it returns ZERO_VECTOR.
</Word>
		<Word name="llGetCameraRot" type="rotation">
			Returns the rotation of the camera of the user who&apos;s granted
			this script PERMISSION_TRACK_CAMERA. If no user has granted the
			permission,it returns ZERO_ROTATION. The key of the user whose
			camera is being tracked can be obtained using llGetPermissionsKey.
</Word>
		<Word name="llGetCreator" type="key">
			Returns the key of the object&apos;s original creator. Similar to llGetOwner.
</Word>
		<Word name="llGetGeometricCenter" type="vector">
			Returns the geometric center of the linked set the 
			script is in relative to the object&apos;s position 
			(the position of the root prim of a linked set). 
			To get the object&apos;s position,use llGetPos.
</Word>
		<Word name="llGetGMTclock" type="float">
			Gets the time in seconds since midnight in GMT/UTC.
</Word>
		<Word name="llGetInventoryCreator" type="key" args="string item">
			This function returns the UUID of the creator of item.
			If item is not found in inventory,
			the object says &quot;No item named &apos;name&apos; &quot;.
</Word>
		<Word name="llGetInventoryPermMask" type="integer" args="string item,integer mask">
			Returns the requested permission mask for the inventory 
			item defined by item. If item is not in the object&apos;s inventory,
			llGetInventoryPermMask returns 0 and causes the object to
			say &quot;No item named &apos;&lt;item&gt;&apos;&quot;,where &quot;&lt;item&gt;&quot; is item.
			If this is used to determine whether or not an inventory item
			exists within the object,it will have the side effect of spamming chat.
		</Word>
		<Word name="llGetInventoryType" type="integer" args="string name">
			Returns the type of the inventory item name.
			Remember,like the other inventory functions,llGetInventoryType
			is case-sensitive.
</Word>
		<Word name="llGetMass" type="float">
			Returns the scripted object&apos;s mass. When called from a script
			in a linkset,the parent will return the sum of the linkset weights,
			while a child will return just its own mass. When called from
			a script inside an attachment,this function will return the mass
			of the avatar it&apos;s attached to,not its own.
</Word>
		<Word name="llGetNumberOfNotecardLines" type="key" args="string name">
			Returns number of lines in the notecard name via the dataserver event. 
			(Cast the value returned by the dataserver to an integer.)
			The key returned is a query id for identifying the dataserver reply.
</Word>
		<Word name="llGetNumberOfPrims" type="integer">
			Returns the number of prims in (and avatars seated on)
			the object the script is in.
</Word>
		<Word name="llGetObjectDesc" type="string">
			Returns the description of the scripted object/prim. 
			You can set the description using llSetObjectDesc.
</Word>
		<Word name="llGetObjectMass" type="float" args="key id">
			Gets the mass of the object or avatar corresponding to id.
</Word>
		<Word name="llGetObjectPermMask" type="integer" args="integer mask">
			Returns the requested permission mask for the root object
			the task is attached to.
		</Word>
		<Word name="llGetParcelDetails" type="list" args="vector pos,list details">
			Returns of a list of the details in the order they are in the details list,
			for the parcel at pos. pos is in absolute region coordinates.
</Word>
		<Word name="llGetParcelFlags" type="integer" args="vector pos">
			Returns a bitfield specifying the parcel flags 
			(PARCEL_FLAG_*) for the parcel under the position pos.
</Word>
		<Word name="llGetPrimitiveParams" type="list" args="list params">
			Returns primitive parameters specified in the params list.
</Word>
		<Word name="llGetRegionCorner" type="vector">
			Returns the RegionCorner of the simulator containing the task.
</Word>
		<Word name="llGetRegionFlags" type="integer">
			Returns a bitfield specifying the region flags
			(REGION_FLAG_*) for the region the object is in.
</Word>
		<Word name="llGetRootPosition" type="vector">
			Gets the position (in region coordinates) 
			of the root/parent prim of the object containing the script.
			This is used to allow a child prim to determine where the root is.
</Word>
		<Word name="llGetRootRotation" type="rotation">
			Gets the global rotation of the root object of the
			object script is attached to.
</Word>
		<Word name="llGetSimulatorHostname" type="string">
			Returns the host name (server) of the sim
			in which the scripted object is located.
			For example,&quot;sim225.agni.lindenlab.com&quot;.
</Word>
		<Word name="llGetTimestamp" type="string">
			Returns the current time-and-date (a timestamp)
			in the format YYYY-MM-DDThh:mm:ss.ff..fZ,
			for example: 2004-08-27T00:56:21.785886Z
			The letter Z stands for Zulu,
			the military time zone name for UTC. T is just
			a separator between date and time.
</Word>
		<Word name="llGetUnixTime" type="integer">
			Returns the number of seconds elapsed since 00:00 hours,
			Jan 1,1970 UTC from the system clock.
			In UNIX terms,time_t. This is great for a monotonic
			source of time that ticks once a second.
</Word>
		<Word name="llHTTPRequest" type="key" args="string url,list parameters,string body">
			Sends HTTP request to url with the specified body and parameters.

			url must always be a valid HTTP or HTTPS URL,pointing to a
			location outside the Linden Lab and Second Life servers.
</Word>
		<Word name="llIntegerToBase64" type="string" args="integer number">
			Encodes number as an 8-character Base64 string.
</Word>
		<Word name="llListReplaceList" type="list" args="list dest,list src,integer start,integer end">
			Returns a list replacing the slice of the list dest from
			start to end with the list src. start and end are inclusive,
			so 0,1 would replace the first two entries
			and 0,0 would replace only the first list entry.
</Word>
		<Word name="llListStatistics" type="float" args="integer operation,list input">
			This function allows a script to perform a statistical
			operation as defined by operation on a list composed
			of integers and floats.
		</Word>
		<Word name="llLoadURL" args="key avatar_id,string message,string url">
			llLoadURL displays a dialog box to the user offering
			to load a web page using the default web browser.
</Word>
		<Word name="llLog" type="float" args="float val">
			Returns the base e (natural) logarithm of val (value).
</Word>
		<Word name="llLog10" type="float" args="float val">
			Returns the base 10 (common) logarithm of val (value).
</Word>
		<Word name="llMapDestination" args="string simname,vector position,vector lookat">
			Shows a given location on the map.
			Works in attachments,or during touch events.
			Currently the function will open the map window whenever it is called.
			There is no way to simply set the map position without
			opening the window.
</Word>
		<Word name="llMD5String" type="string" args="string src,integer nonce">
			Performs a RSA Data Security,Inc. MD5 Message-Digest
			Algorithm on string with nonce (also known as salt).
			Returns a 32-character hex string. (128-bit in binary.)
</Word>
		<Word name="llModPow" type="integer" args="integer a,integer b,integer c">
			Returns a raised to the b power,mod c. ((a ^ b)%c). 
			b is capped at 0xFFFF (16 bits).
</Word>
		<Word name="llOpenRemoteDataChannel">
			Creates a channel to listen for XML-RPC calls. 
			Will trigger a remote_data event with type = REMOTE_DATA_CHANNEL
			and a channel ID (key) once it is available.
			This channel ID must be referenced in the XML-RPC call
			to the script (from the outside internet)--
			so the key must somehow get to the scripter&apos;s XML-RPC client,
			most often via llEmail,llHttpRequest or llLoadUrl.
</Word>
		<Word name="llOwnerSay" args="string message">
			Says message to only the owner of the object running the script
			if the owner has been within the object&apos;s simulator since
			logging into Second Life,regardless of where they may be are in-world.
</Word>
		<Word name="llParcelMediaCommandList" args="list command_list">
			Playing QuickTime movies (you have to own the land).
</Word>
		<Word name="llParcelMediaQuery" type="list" args="list query_list">
			Queries the texture and/or URL for QuickTime-playable
			video on the land parcel.
			This function will only work if the script is contained
			within an object owned by the landowner (or if the land
			is owned by a group,only if the object has been deeded
			to the group). It will not work for group land if the
			object owner is a member of the group. The object
			actually has to be owned by the group.
</Word>
		<Word name="llParseStringKeepNulls" type="list" args="string src,list separators,list spacers">
			llParseStringKeepNulls works almost exactly the same as
			llParseString2List,except that if a null is found
			it will add a null string instead of discarding it
			like llParseString2List does.
</Word>
		<Word name="llReleaseCamera" args="key agent">
			A FollowCam function that returns the camera to the 
			key agent after permission to change it with
			llSetCameraParams has been granted via
			llRequestPermissions(agent_key,PERMISSION_CONTROL_CAMERA).
</Word>
		<Word name="llRemoteDataReply" args="key channel,key message_id,string sdata,integer idata">
			Send an XML-RPC reply to the request with message_id
			on channel with payload of string sdata and integer idata.
			The size of sdata is limited to 254 characters.
</Word>
		<Word name="llRemoteDataSetRegion">
			does not work!
</Word>
		<Word name="llRemoteLoadScriptPin" args="key target,string name,integer pin,integer running,integer start_param">
			If the owner of the object containing this script can modify
			the object identified by the key target,and if the pin matches
			the PIN previously set using llSetRemoteScriptAccessPin
			(on the target prim),then the script name will be copied into target.
</Word>
		<Word name="llRemoveFromLandBanList" args="key avatar">
			Remove avatar from the land parcel ban list.
</Word>
		<Word name="llRemoveFromLandPassList" args="key avatar">
			Remove avatar from the land parcel pass list.
</Word>
		<Word name="llResetLandBanList">
			Removes all residents from the land ban list.
</Word>
		<Word name="llResetLandPassList">
			Removes all residents from the land access/pass list.
</Word>
		<Word name="llRequestSimulatorData" type="key" args="string simulator,integer data">
			Requests data about the sim with the name simulator.
			simulator is case-insensitive.		 
			Returns a dataserver query ID and triggers the dataserver
			event when data is found. The sim name is usually not case-sensitive,
			but sometimes will return data for a similarly-named sim
			if the supplied case doesn&apos;t match the intended sim&apos;s actual name.
</Word>
		<Word name="llRezAtRoot" args="string inventory,vector pos,vector vel,rotation rot,integer param">
			Rezzes object&apos;s inventory item named inventory at
			pos with velocity vel and rotation rot with start parameter param.
</Word>
		<Word name="llSendRemoteData" type="key" args="key channel,string dest,integer idata,string sdata">
			Send an XML-RPC request to dest (probably an URL)
			through channel with payload of channel (in a string),
			integer idata and string sdata.
</Word>
		<Word name="llSetCameraParams" args="list rules">
			Sets multiple camera parameters at once.
			List format is [rule1,value1,rule2,value2 . . . ruleN,valueN]
</Word>
		<Word name="llSetLinkAlpha" args="integer linknumber,float alpha,integer face">
			Sets the side number face on the linked child linknumber
			to the transparency alpha.
</Word>
		<Word name="llSetLocalRot" args="rotation rot">
			Sets the rotation of a child prim relative to the root prim.
</Word>
		<Word name="llSetObjectDesc" args="string name">
			Sets the description of the scripted prim to name.
			You can get the description using llGetObjectDesc.
			The description is limited to 127 characters.
</Word>
		<Word name="llSetParcelMusicURL" args="string url">
			Sets the streaming audio URL for the parcel the
			scripted object is on (the object must be owned
			by the owner of the parcel,if the parcel is group
			owned the object must be owned by that group).
</Word>
		<Word name="llSetPayPrice" args="integer price,list quick_pay_buttons">
			Sets the values of the buttons and the text box default
			for the Pay dialog -- when a user right-clicks on
			the object and selects &quot;Pay&quot;,llSetPayPrice will affect
			what buttons exist,what their values are,and whether
			or not there is a manual payment text entry box.
</Word>
		<Word name="llSetPrimitiveParams" args="list rule">
			This function changes the many properties (or &quot;parameters&quot;)
			of a prim in one operation. The parameter is a list of changes.
			(Don&apos;t confuse prim parameters with function parameters.)
</Word>
		<Word name="llSetRemoteScriptAccessPin" args="integer pin">
			If pin is set to a non-zero number,the task will accept
			remote script loads via llRemoteLoadScriptPin
			if passed the matching PIN.
			Otherwise llRemoteLoadScriptPin is ignored
</Word>
		<Word name="llStringTrim" args="string text,integer trim_type">
			Outputs a string eliminating whitespace from the start and/or end of the specified string.

			Constants for trim_type:
			STRING_TRIM_HEAD: trim all leading spaces in text
			STRING_TRIM_TAIL: trim all trailing spaces in text
			STRING_TRIM: trim all leading and trailing spaces in text
		</Word>
		<Word name="llStringToBase64" type="string" args="string str">
			Converts a string to the Base 64 representation of the string.
</Word>
		<Word name="llUnescapeURL" type="string" args="string url">
			Returns the string that is the URL unescaped version
			of url,replacing &quot;%20&quot; with spaces,etc.
			The function can output raw UTF-8 strings.
</Word>
		<Word name="llXorBase64StringsCorrect" type="string" args="string s1,string s2">
			Performs an xor on two Base64 strings and returns a Base64 string.
			s2 repeats if it is shorter than s1.
			This function is for encrypting data. Put your data in s1 and
			your key in s2 to encrypt or put the encrypted data into s1
			with the same key in s2 to decrypt again.
</Word>
		<Word name="llSetInventoryPermMask" args="string item,integer mask,integer value">
			Sets the given permission mask to the new value on the inventory item.
</Word>
		<Word name="llSetObjectPermMask" args="integer mask,integer value">
			Sets the given permission mask to the new value on the root object 
			the task is attached to.
</Word>
		<Word name="llSetSoundRadius" args="float radius">
			Establishes a hard cut-off radius for audibility of scripted 
			sounds (both attached and triggered)
</Word>
		<Word name="llTakeCamera" args="key avatar">
			Move avatar&apos;s viewpoint to task
</Word>
		<Word name="llGetObjectDetails" type="list" args="key id,list params">
			Returns a list of the details specified in params for the object with key id.
		</Word>
		<Word name="llSetClickAction" args="integer action">
			Sets the action performed when a prim is clicked upon.
		</Word>
		<Word name="llGetRegionAgentCount" type="integer">
			Returns an integer that is the number of avatars in the region.
</Word>
		<Word name="llTextBox" args="key avatar,string message,integer chat_channel">
			*** Pre-release Documentation Warning ***
			Shows a dialog box on avatar&apos;s screen with the text message.
			It contains a text box for input,any text that is entered
			is said on chat_channel when the &quot;OK&quot; button is clicked.
</Word>
		<Word name="llGetAgentLanguage" type="string" args="key avatar">
			Returns a string that is the language code of the preferred 
			interface language of the user avatar.
</Word>
		<Word name="llDetectedTouchUV" type="vector" args="integer index">
			Returns a vector that is the texture coordinates for where
			the prim was touched. The x and y vector positions contain
			the u and v face coordinates respectively.

			TOUCH_INVALID_TEXCOORD is returned
			when the touch UV coordinates cannot be determined.
		</Word>
		<Word name="llDetectedTouchFace" type="integer" args="integer index">
			Returns an integer that is the index of the face the avatar clicked on.
		</Word>
		<Word name="llDetectedTouchPos" type="vector" args="integer index">
			Returns a vector that is the position where the object 
			was touched in region coordinates,unless it is attached to 
			the HUD,in which case it returns the position relative 
			to the attach point.
		</Word>
		<Word name="llDetectedTouchNormal" type="vector" args="integer index">
			Returns a vector that is the surface normal 
			(perpendicular to the surface) where the touch event was triggered.
		</Word>
		<Word name="llDetectedTouchBinormal" type="vector" args="integer index">
			Returns a vector that is the surface binormal
			(tangent to the surface) where the touch event was triggered.
		</Word>
		<Word name="llDetectedTouchST" type="vector" args="integer index">
			Returns a vector that is the surface coordinates for where the prim was touched.
			The x and y vector positions contain the horizontal (s) and vertical (t) face
			coordinates respectively.
			Each component is in the interval [0.0,1.0].

			TOUCH_INVALID_TEXCOORD is returned when the surface coordinates cannot be determined.
		</Word>
		<Word name="llSHA1String" type="string" args="string src">
			*** Pre-release Documentation Warning ***
			Returns a string of 40 hex characters that is the SHA1 security hash of src.
</Word>
		<Word name="llGetFreeURLs" type="integer"/>
		<Word name="llRequestURL" type="key"/>
		<Word name="llRequestSecureURL" type="key"/>
		<Word name="llReleaseURL" args="string url"/>
		<Word name="llHTTPResponse" args="key request_id,integer status,string body"/>
		<Word name="llGetHTTPHeader" args="key request_id,integer status,string body"/>
		<Word name="llSound" args="">
			Note that llSound does do one thing its replacement functions don't cover: the sound position is "attached" to the object as with llPlaySound, but can be triggered several times in succession like llTriggerSound.
		</Word>
		<Word name="llSoundPreload" args="key">
			This is the same function as llPreloadSound. This function is deprecated.
		</Word>
		<Word name="llGodLikeRezObject" args="key vector">
		This function, if you have the god bit set (only Lindens :-P) allows you to rez an object by key (specified by the inventory argument) at region location: pos.
		</Word>
		<Word name="llSetPrimURL" args="string url">
			Updates the URL for the web page shown on the sides of the object.
			This feature has not yet been implemented.
		</Word>
		<Word name="llRefreshPrimURL" args="">
		Reloads the web page shown on the sides of the object.
		This feature has not yet been implemented.
		</Word>
		<Word name="llSetPrimMediaParams" args="">
		</Word>
		<Word name="llGetPrimMediaParams" args="">
		</Word>
		<Word name="llClearPrimMedia" args="">
		</Word>
		<Word name="llSetLinkPrimitiveParamsFast" args="">
		</Word>
		<Word name="llGetLinkPrimitiveParams" args="">
		</Word>
		<Word name="llLinkParticleSystem" args="">
		</Word>
		<Word name="llSetLinkTextureAnim" args="">
		</Word>
		<Word name="llGetLinkNumberOfSides" args="">
		</Word>
		<Word name="llGetUsername" args="">
		</Word>
		<Word name="llRequestUsername" args="">
		</Word>
		<Word name="llGetDisplayName" args="">
		</Word>
		<Word name="llRequestDisplayName" args="">
		</Word>
		<Word name="llGetEnv" args="">
		</Word>
		<Word name="llRegionSayTo" args="">
		</Word>
	</Words>
	<Words  name="Constants" icon="5">
		To ease scripting,many useful constants are defined by LSL.
		<WordsSubsection name="Boolean Constants">
			The boolean constants represent the values for TRUE and FALSE. 
			LSL represents booleans as integer values 1
			and 0 respectively. Since there is no boolean type these 
			constants act as a scripting aid usually employed for
			testing variables which conceptually represent boolean values.
			<Word name="TRUE" type="integer">
				An integer constant for boolean comparisons. Has the value '1'.
			</Word>
			<Word name="FALSE" type="integer">
				An integer constant for boolean comparisons. Has the value '0'.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Status Constants">
			The status constants are used in the llSetStatus and llGetStatus 
			library calls. These constants can be bitwise ored
			together when calling the library functions to set the same 
			value to more than one status flag
			Status Constants
			<Word name="STATUS_PHYSICS">
				Controls whether the object moves physically. 
				This controls the same flag that the ui checkbox for
				Physical controls. The default is FALSE.
			</Word>
			<Word name="STATUS_PHANTOM">
				Controls whether the object collides or not. 
				Setting the value to TRUE makes the object non-colliding with
				all objects. It is a good idea to use this for most objects 
				that move or rotate,but are non-physical. It is also
				useful for simulating volumetric lighting. The default is FALSE.
			</Word>
			<Word name="STATUS_ROTATE_X">
			</Word>
			<Word name="STATUS_ROTATE_Y">
			</Word>
			<Word name="STATUS_ROTATE_Z">
				Controls whether the object can physically rotate around 
				the specific axis or not. This flag has no meaning
				for non-physical objects. Set the value to FALSE 
				if you want to disable rotation around that axis. The
				default is TRUE for a physical object.
				A useful example to think about when visualizing 
				the effect is a sit-and-spin device. They spin around the
				Z axis (up) but not around the X or Y axis.
			</Word>
			<Word name="STATUS_BLOCK_GRAB">
				Controls whether the object can be grabbed. 
				A grab is the default action when in third person,and is
				available as the hand tool in build mode. 
				This is useful for physical objects that you dont want other
				people to be able to trivially disturb. 
				The default if FALSE
			</Word>
			<Word name="STATUS_SANDBOX">
				Controls whether the object can cross region boundaries 
				and move more than 20 meters from its creation
				point. The default if FALSE.
			</Word>
			<Word name="STATUS_DIE_AT_EDGE">
				Controls whether the object is returned to the owners 
				inventory if it wanders off the edge of the world. It is
				useful to set this status TRUE for things like bullets 
				or rockets. The default is TRUE
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Object Type Constants">
			These constants can be combined using the binary | operator 
			and are used in the llSensor and related calls.
			Object Type Constants
			<Word name="AGENT">
				Objects in world that are agents.
			</Word>
			<Word name="ACTIVE">
				Objects in world that are running a script or 
				currently pysically moving.
			</Word>
			<Word name="PASSIVE">
				Static in-world objects.
			</Word>
			<Word name="SCRIPTED">
				Scripted in-world objects.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Permission Constants">
			The permission constants are used for passing values 
			to llRequestPermissions,determing the value of
			llGetPermissions,and explicitly passed to the 
			run_time_permissions event. For many of the basic library
			functions to work,a specific permission must be enabled. 
			The permission constants can be ored together to be
			used in conjunction.

			Permission Constants
			<Word name="PERMISSION_DEBIT">
				If this permission is enabled,the object can successfully 
				call llGiveMoney to debit the owners account.
			</Word>
			<Word name="PERMISSION_TAKE_CONTROLS">
				If this permission enabled,the object can successfully 
				call the llTakeControls libray call.
			</Word>
			<Word name="PERMISSION_REMAP_CONTROLS">
				(not yet implemented)
			</Word>
			<Word name="PERMISSION_TRIGGER_ANIMATION">
				If this permission is enabled,the object can successfully 
				call llStartAnimation for the avatar that owns this
				object.
			</Word>
			<Word name="PERMISSION_ATTACH">
				If this permission is enabled,the object can successfully 
				call llAttachToAvatar to attach to the given avatar.
			</Word>
			<Word name="PERMISSION_RELEASE_OWNERSHIP">
				(not yet implemented)
			</Word>
			<Word name="PERMISSION_CHANGE_LINKS">
				If this permission is enabled,the object can successfully 
				call llCreateLink,llBreakLink,and
				llBreakAllLinks to change links to other objects.
			</Word>
			<Word name="PERMISSION_CHANGE_JOINTS">
				(not yet implemented)
			</Word>
			<Word name="PERMISSION_CHANGE_PERMISSIONS">
				(not yet implemented)
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Inventory Constants">
			These constants can be used to refer to a specific inventory 
			type in calls to llGetInventoryNumber
			andllGetInventoryName.
			Inventory Constants
			<Word name="INVENTORY_TEXTURE">
			</Word>
			<Word name="INVENTORY_SOUND">
			</Word>
			<Word name="INVENTORY_OBJECT">
			</Word>
			<Word name="INVENTORY_SCRIPT">
			</Word>
			<Word name="INVENTORY_LANDMARK">
			</Word>
			<Word name="INVENTORY_CLOTHING">
			</Word>
			<Word name="INVENTORY_NOTECARD">
			</Word>
			<Word name="INVENTORY_BODYPART">
				Each constant refers to the named type of inventory.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Attachment Constants">
			These constants are used to refer to attachment points 
			in calls to llAttachToAvatar.
			Attachment Constants
			<Word name="ATTACH_CHEST">
				Attach to the avatar chest.
			</Word>
			<Word name="ATTACH_HEAD">
				Attach to the avatar head.
			</Word>
			<Word name="ATTACH_LSHOULDER">
				Attach to the avatar left shoulder.
			</Word>
			<Word name="ATTACH_RSHOULDER">
				Attach to the avatar right shoulder.
			</Word>
			<Word name="ATTACH_LHAND">
				Attach to the avatar left hand.
			</Word>
			<Word name="ATTACH_RHAND">
				Attach to the avatar right hand.
			</Word>
			<Word name="ATTACH_LFOOT">
				Attach to the avatar left foot.
			</Word>
			<Word name="ATTACH_RFOOT">
				Attach to the avatar right foot.
			</Word>
			<Word name="ATTACH_BACK">
				Attach to the avatar back.
			</Word>
			<Word name="ATTACH_PELVIS">
				Attach to the avatar pelvis.
			</Word>
			<Word name="ATTACH_MOUTH">
				Attach to the avatar mouth.
			</Word>
			<Word name="ATTACH_CHIN">
				Attach to the avatar chin.
			</Word>
			<Word name="ATTACH_LEAR">
				Attach to the avatar left ear.
			</Word>
			<Word name="ATTACH_REAR">
				Attach to the avatar right ear.
			</Word>
			<Word name="ATTACH_LEYE">
				Attach to the avatar left eye.
			</Word>
			<Word name="ATTACH_REYE">
				Attach to the avatar right eye.
			</Word>
			<Word name="ATTACH_NOSE">
				Attach to the avatar nose.
			</Word>
			<Word name="ATTACH_RUARM">
				Attach to the avatar right upper arm.
			</Word>
			<Word name="ATTACH_RLARM">
				Attach to the avatar right lower arm.
			</Word>
			<Word name="ATTACH_LUARM">
				Attach to the avatar left upper arm.
			</Word>
			<Word name="ATTACH_LLARM">
				Attach to the avatar left lower arm.
			</Word>
			<Word name="ATTACH_RHIP">
				Attach to the avatar right hip.
			</Word>
			<Word name="ATTACH_RULEG">
				Attach to the avatar right upper leg.
			</Word>
			<Word name="ATTACH_RLLEG">
				Attach to the avatar right lower leg.
			</Word>
			<Word name="ATTACH_LHIP">
				Attach to the avatar left hip.
			</Word>
			<Word name="ATTACH_LULEG">
				Attach to the avatar lower upper leg.
			</Word>
			<Word name="ATTACH_LLLEG">
				Attach to the avatar lower left leg.
			</Word>
			<Word name="ATTACH_BELLY">
				Attach to the avatar belly.
			</Word>
			<Word name="ATTACH_RPEC">
				Attach to the avatar right pectoral. (depreciated)
			</Word>
			<Word name="ATTACH_LPEC">
				Attach to the avatar left pectoral. (depreciated)
			</Word>

			<Word name="ATTACH_HUD_CENTER_2">
			</Word>
			<Word name="ATTACH_HUD_TOP_RIGHT">
			</Word>
			<Word name="ATTACH_HUD_TOP_CENTER">
			</Word>
			<Word name="ATTACH_HUD_TOP_LEFT">
			</Word>
			<Word name="ATTACH_HUD_CENTER_1"> 
			</Word>
			<Word name="ATTACH_HUD_BOTTOM_LEFT">		 
			</Word>
			<Word name="ATTACH_HUD_BOTTOM">		 
			</Word>
			<Word name="ATTACH_HUD_BOTTOM_RIGHT">
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Land Constants">
			These constants are only used in calls to llModifyLand.
			The constants are equivalent to the similarly labelled
			user interface elements for editing land in the viewer.
			Land Constants
			<Word name="LAND_LEVEL">
				Action to level the land.
			</Word>
			<Word name="LAND_RAISE">
				Action to raise the land.
			</Word>
			<Word name="LAND_LOWER">
				Action to lower the land.
			</Word>
			<Word name="LAND_SMALL_BRUSH">
				Use a small brush size.
			</Word>
			<Word name="LAND_MEDIUM_BRUSH">
				Use a medium brush size.
			</Word>
			<Word name="LAND_LARGE_BRUSH">
				Use a large brush size.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Link Constants">
			These constants are used in calls to llSetLinkColor and 
			llMessageLinked.

			Link Constants
			<Word name="LINK_SET">
				This targets every object in the linked set.
			</Word>
			<Word name="LINK_ROOT">
				This targets the root of the linked set.
			</Word>
			<Word name="LINK_ALL_OTHERS">
				This targets every object in the linked set except 
				the object with the script.
			</Word>
			<Word name="LINK_ALL_CHILDREN">
				This targets every object except the root in the linked set.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Control Constants">
			These constants are used in llTakeControls as well 
			as the control event handler.
			Control Constants
			<Word name="CONTROL_FWD">
				Test for the avatar move forward control.
			</Word>
			<Word name="CONTROL_BACK">
				Test for the avatar move back control.
			</Word>
			<Word name="CONTROL_LEFT">
				Test for the avatar move left control.
			</Word>
			<Word name="CONTROL_RIGHT">
				Test for the avatar move right control.
			</Word>
			<Word name="CONTROL_ROT_LEFT">
				Test for the avatar rotate left control.
			</Word>
			<Word name="CONTROL_ROT_RIGHT">
				Test for the avatar rotate right control.
			</Word>
			<Word name="CONTROL_UP">
				Test for the avatar move up control.
			</Word>
			<Word name="CONTROL_DOWN">
				Test for the avatar move down control.
			</Word>
			<Word name="CONTROL_LBUTTON">
				Test for the avatar left button control.
			</Word>
			<Word name="CONTROL_ML_LBUTTON">
				Test for the avatar left button control while in mouse look.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Change Constants">
			These constants are used in the changed event handler.
			Change Constants
			<Word name="CHANGED_INVENTORY">
				The object inventory has changed.
			</Word>
			<Word name="CHANGED_ALLOWED_DROP">
				The object inventory has changed because an item was 
				added through the llAllowInventoryDrop interface.
			</Word>
			<Word name="CHANGED_COLOR">
				The object color has changed.
			</Word>
			<Word name="CHANGED_SHAPE">
				The object shape has changed,eg,a box to a cylinder
			</Word>
			<Word name="CHANGED_SCALE">
				The object scale has changed.
			</Word>
			<Word name="CHANGED_TEXTURE">
				The texture offset,scale rotation,or simply the object 
				texture has changed.
			</Word>
			<Word name="CHANGED_LINK">
				The object has linked or its links were broken.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Type Constants">
			These constants are used to determine the variable type 
			stored in a heterogenous list. The value returned from
			llGetListEntryType can be used for comparison against 
			these constants.
			Type Constants
			<Word name="TYPE_INTEGER">
				The list entry is an integer.
			</Word>
			<Word name="TYPE_FLOAT">
				The list entry is a float.
			</Word>
			<Word name="TYPE_STRING">
				The list entry is a string.
			</Word>
			<Word name="TYPE_KEY">
				The list entry is a key.
			</Word>
			<Word name="TYPE_VECTOR">
				The list entry is a vector.
			</Word>
			<Word name="TYPE_ROTATION">
				The list entry is a rotation.
			</Word>
			<Word name="TYPE_INVALID">
				The list entry is invalid.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Agent Info Constants">
			Each of these constants represents a bit in the integer 
			returned from the llGetAgentInfo function and can be used
			in an expression to determine the specified information 
			about an agent.
			Agent Info Constants
			<Word name="AGENT_FLYING">
				The agent is flying.
			</Word>
			<Word name="AGENT_ATTACHMENTS">
				The agent has attachments.
			</Word>
			<Word name="AGENT_SCRIPTED">
				The agent has scripted attachments.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Texture Animation Constants">
			These constants are used in the llSetTextureAnim api to 
			control the animation mode.
			Texture Animation Constants
			<Word name="ANIM_ON">
				Texture animation is on.
			</Word>
			<Word name="LOOP">
				Loop the texture animation.
			</Word>
			<Word name="REVERSE">
				Play animation in reverse direction.
			</Word>
			<Word name="PING_PONG">
				play animation going forwards,then backwards.
			</Word>
			<Word name="SMOOTH">
				slide in the X direction,instead of playing separate frames.
			</Word>
			<Word name="ROTATE">
				Animate texture rotation.
			</Word>
			<Word name="SCALE">
				Animate the texture scale.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Particle System Constants">
			These constants are used in calls to the llParticleSystem 
			api to specify parameters.
			Particle System Parameters
			<Word name="PSYS_PART_FLAGS">
				Each particle that is emitted by the particle system is 
				simulated based on the following flags. To use
				multiple flags,bitwise or (|) them together.
				PSYS_PART_FLAGS Values
			</Word>
			<Word name="PSYS_PART_INTERP_COLOR_MASK">
				Interpolate both the color and alpha from the start 
				value to the end value.
			</Word>
			<Word name="PSYS_PART_INTERP_SCALE_MASK">
				Interpolate the particle scale from the start value 
				to the end value.
			</Word>
			<Word name="PSYS_PART_WIND_MASK">
				Particles have their velocity damped towards the wind velocity.
			</Word>
			<Word name="PSYS_PART_BOUNCE_MASK">
				Particles bounce off of a plane at the objects Z height.
			</Word>
			<Word name="PSYS_PART_FOLLOW_SRC_MASK">
				The particle position is relative to the source objects position.
			</Word>
			<Word name="PSYS_PART_FOLLOW_VELOCITY_MASK">
				The particle orientation is rotated so the vertical 
				axis faces towards the particle velocity.
			</Word>
			<Word name="PSYS_PART_TARGET_POS_MASK">
				The particle heads towards the location of the target 
				object as defined by PSYS_SRC_TARGET_KEY.
			</Word>
			<Word name="PSYS_PART_EMISSIVE_MASK">
				The particle glows.
			</Word>
			<Word name="PSYS_PART_RANDOM_ACCEL_MASK">
				(not implemented)
			</Word>
			<Word name="PSYS_PART_RANDOM_VEL_MASK">
				(not implemented)
			</Word>
			<Word name="PSYS_PART_TRAIL_MASK">
				(not implemented)
			</Word>
			<Word name="PSYS_SRC_PATTERN">
				The pattern which is used to generate particles. 
				Use one of the following values:
				PSYS_SRC_PATTERN Values
			</Word>
			<Word name="PSYS_PART_SRC_PATTERN_DROP">
				Drop particles at the source position.
			</Word>
			<Word name="PSYS_PART_SRC_PATTERN_EXPLODE">
				Shoot particles out in all directions,
				using the burst parameters.
			</Word>
			<Word name="PSYS_PART_SRC_PATTERN_ANGLE">
				Shoot particles across a 2 dimensional area defined 
				by the arc created from
				PSYS_SRC_OUTERANGLE. 
				There will be an open area defined by PSYS_SRC_INNERANGLE
				within the larger arc.
			</Word>
			<Word name="PSYS_PART_SRC_PATTERN_ANGLE_CONE">
				Shoot particles out in a 3 dimensional cone with 
				an outer arc of PSYS_SRC_OUTERANGLE and an
				inner open area defined by PSYS_SRC_INNERANGLE.
			</Word>
			<Word name="PSYS_PART_START_COLOR">
				a vector &lt;r,g,b&gt; which determines the starting 
				color of the object.
			</Word>
			<Word name="PSYS_PART_START_ALPHA">
				a float which determines the starting alpha of the object.
			</Word>
			<Word name="PSYS_PART_END_COLOR">
				a vector &lt;r,g,b&gt; which determines the ending 
				color of the object.
			</Word>
			<Word name="PSYS_PART_END_ALPHA">
				a float which determines the ending alpha of the object.
			</Word>
			<Word name="PSYS_PART_START_SCALE">
				a vector &lt;sx,sy,z&gt;,
				which is the starting size of the particle billboard 
				in meters (z is ignored).
			</Word>
			<Word name="PSYS_PART_END_SCALE">
				a vector &lt;sx,sy,z&gt;,which is the ending 
				size of the particle billboard in meters (z is ignored).
			</Word>
			<Word name="PSYS_PART_MAX_AGE">
				age in seconds of a particle at which it dies.
			</Word>
			<Word name="PSYS_SRC_ACCEL">
				a vector &lt;x,y,z&gt; which is the acceleration 
				to apply on particles.
			</Word>
			<Word name="PSYS_SRC_TEXTURE">
				an asset name for the texture to use for the particles.
			</Word>
			<Word name="PSYS_SRC_BURST_RATE">
				how often to release a particle burst (float seconds).
			</Word>
			<Word name="PSYS_SRC_INNERANGLE">
				specifies the inner angle of the arc created 
				by the PSYS_PART_SRC_PATTERN_ANGLE or
				PSYS_PART_SRC_PATTERN_ANGLE_CONE source pattern. 
				The area specified will not have particles
				in it..
			</Word>
			<Word name="PSYS_SRC_OUTERANGLE">
				specifies the outer angle of the arc created 
				by the PSYS_PART_SRC_PATTERN_ANGLE or
				PSYS_PART_SRC_PATTERN_ANGLE_CONE source pattern. 
				The area between the outer and inner angle
				will be filled with particles..
			</Word>
			<Word name="PSYS_SRC_BURST_PART_COUNT">
				how many particles to release in a burst.
			</Word>
			<Word name="PSYS_SRC_BURST_RADIUS">
				what distance from the center of the object 
				to create the particles.
			</Word>
			<Word name="PSYS_SRC_BURST_SPEED_MIN">
				minimum speed that a particle should be moving.
			</Word>
			<Word name="PSYS_SRC_BURST_SPEED_MAX">
				maximum speed that a particle should be moving.
			</Word>
			<Word name="PSYS_SRC_MAX_AGE">
				how long this particle system should last,
				0.0 menas forever.
			</Word>
			<Word name="PSYS_SRC_TARGET_KEY">
				the key of a target object to move towards 
				if PSYS_PART_TARGET_POS_MASK is enabled.
			</Word>
			<Word name="PSYS_SRC_OMEGA">
				Sets the angular velocity to rotate the axis 
				that SRC_PATTERN_ANGLE and
				SRC_PATTERN_ANGLE_CONE use..
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Agent Data Constants">
			These constants are used in calls to the 
			llRequestAgentData api to collect information about 
			an agent which will
			be provided in the dataserver event.
			Texture Animation Constants
			<Word name="DATA_ONLINE">
				"1" for online "0" for offline.
			</Word>
			<Word name="DATA_NAME">
				The name of the agent.
			</Word>
			<Word name="DATA_BORN">
				The date the agent was born returned in ISO 8601 format of YYYY-MM-DD.
			</Word>
			<Word name="DATA_RATING">
				Returns the agent ratings as a comma separated string 
				of six integers. They are:

				1. Positive rated behavior
				2. Negative rated behavior
				3. Positive rated appearance
				4. Negative rated appearance
				5. Positive rated building
				6. Negative rated building
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Float Constants">
			LSL provides a small collection of floating point 
			constants for use in float arithmetic. 
			These constants are usually
			employed while performing trigonometric calculations,
			but are sometimes useful for other applications such as
			specifying arc radians to sensor or particle system functions.
			Float Constants
			<Word name="PI">
				3.14159265 - The radians of a hemicircle.
			</Word>
			<Word name="TWO_PI">
				6.28318530 - The radians of a circle.
			</Word>
			<Word name="PI_BY_TWO">
				1.57079633 - The radians of a quarter circle.
			</Word>
			<Word name="DEG_TO_RAD">
				0.01745329 - Number of radians per degree. 
				You can use this to convert degrees to radians by multiplying
				the degrees by this number.
			</Word>
			<Word name="RAD_TO_DEG">
				57.2957795 - Number of degrees per radian. 
				You can use this number to convert radians to degrees by
				multiplying the radians by this number.
			</Word>
			<Word name="SQRT2">
				1.41421356 - The square root of 2.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Key Constant">
			<Word name="NULL_KEY">
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Integer Constants">
			<Word name="ALL_SIDES">
			A constant with the value of -1,used to affect all sides of the prim when passed to these functions:

			llGetAlpha
			llGetColor Returns "average" color on all sides of the prim.
			llOffsetTexture
			llRotateTexture
			llScaleTexture
			llSetAlpha
			llSetColor
			llSetLinkAlpha
			llSetLinkColor
			llSetPrimitiveParams
			llSetTexture
			llSetTextureAnim
			</Word>
		</WordsSubsection>
		<WordsSubsection name="String Constants">
			<Word name="EOF">
			EOF is a string that contains three newline ("\n") characters.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Vector Constant">
			<Word name="ZERO_VECTOR">
			zero vector:  = 0,0,0
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Rotation Constant">
			<Word name="ZERO_VECTOR">
			ZERO_ROTATION = 0,0,0,1
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Vehicle Parameters">
			Parameters
			<Word name="VEHICLE_LINEAR_FRICTION_TIMESCALE">
				A vector of timescales for exponential 
				decay of the vehicles linear velocity along its preferred axes of
				motion (at,left,up). 
				Range = [0.07,inf) seconds for each element of the vector.
			</Word>
			<Word name="VEHICLE_ANGULAR_FRICTION_TIMESCALE">
				A vector of timescales for exponential 
				decay of the vehicles angular velocity about its preferred axes of
				motion (at,left,up). 
				Range = [0.07,inf) seconds for each element of the vector.
			</Word>
			<Word name="VEHICLE_LINEAR_MOTOR_DIRECTION">
				The direction and magnitude (in preferred frame) 
				of the vehicles linear motor. The vehicle will accelerate
				(or decelerate if necessary) to match its velocity to its motor. 
				Range of magnitude = [0,30] meters/second.
			</Word>
			<Word name="VEHICLE_LINEAR_MOTOR_TIMESCALE">
				The timescale for exponential approach to full linear motor velocity.
			</Word>
			<Word name="VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE">
				The timescale for exponential decay of the linear motors magnitude.
			</Word>
			<Word name="VEHICLE_ANGULAR_MOTOR_DIRECTION">
				The direction and magnitude (in preferred frame) 
				of the vehicles angular motor.The vehicle will accelerate
				(or decelerate if necessary) to match its velocity to its motor.
			</Word>
			<Word name="VEHICLE_ANGULAR_MOTOR_TIMESCALE">
				The timescale for exponential approach to full angular motor velocity.
			</Word>
			<Word name="VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE">
				The timescale for exponential decay of the angular motors magnitude.
			</Word>
			<Word name="VEHICLE_HOVER_HEIGHT">
				The height (above the terrain or water,or global) 
				at which the vehicle will try to hover.
			</Word>
			<Word name="VEHICLE_HOVER_HEIGHT_EFFICIENCY">
				A slider between minimum (0.0 = bouncy) 
				and maximum (1.0 = fast as possible) damped motion of the
				hover behavior.
			</Word>
			<Word name="VEHICLE_HOVER_HEIGHT_TIMESCALE">
				The period of bounce (or timescale of exponential approach,
				depending on the hover efficiency) for the
				vehicle to hover to the proper height.
			</Word>
			<Word name="VEHICLE_BUOYANCY">
				A slider between minimum (0.0) and maximum anti-gravity (1.0).
			</Word>
			<Word name="VEHICLE_LINEAR_DEFLECTION_EFFICIENCY">
				A slider between minimum (0.0) and maximum (1.0) 
				deflection of linear velocity. That is,its a simple
				scalar for modulating the strength of linear deflection.
			</Word>
			<Word name="VEHICLE_LINEAR_DEFLECTION_TIMESCALE">
				The timescale for exponential success of linear 
				deflection deflection. It is another way to specify how much
				time it takes for the vehicles linear velocity 
				to be redirected to its preferred axis of motion.
			</Word>
			<Word name="VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY">
				A slider between minimum (0.0) and maximum (1.0) 
				deflection of angular orientation. That is,its a simple
				scalar for modulating the strength of angular 
				deflection such that the vehicles preferred axis of motion
				points toward its real velocity.
			</Word>
			<Word name="VEHICLE_ANGULAR_DEFLECTION_TIMESCALE">
				The timescale for exponential success of linear 
				deflection deflection. Its another way to specify the strength
				of the vehicles tendency to reorient itself so 
				that its preferred axis of motion agrees with its true velocity.
			</Word>
			<Word name="VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY">
				A slider between minimum (0.0 = wobbly) and 
				maximum (1.0 = firm as possible) stability of the vehicle to
				keep itself upright.
			</Word>
			<Word name="VEHICLE_VERTICAL_ATTRACTION_TIMESCALE">
				The period of wobble,or timescale for 
				exponential approach,of the vehicle to rotate such that its preferred
				"up" axis is oriented along the worlds "up" axis.
			</Word>
			<Word name="VEHICLE_BANKING_EFFICIENCY">
				A slider between anti (-1.0),none (0.0),
				and maxmum (1.0) banking strength.
			</Word>
			<Word name="VEHICLE_BANKING_MIX">
				A slider between static (0.0) and dynamic (1.0) 
				banking. "Static" means the banking scales only with the
				angle of roll,whereas "dynamic" is a term 
				that also scales with the vehicles linear speed.
			</Word>
			<Word name="VEHICLE_BANKING_TIMESCALE">
				The timescale for banking to exponentially 
				approach its maximum effect. This is another way to scale the
				strength of the banking effect,however it affects the 
				term that is proportional to the difference between what
				the banking behavior is trying to do,and what the 
				vehicle is actually doing.
			</Word>
			<Word name="VEHICLE_REFERENCE_FRAME">
				A rotation of the vehicles preferred axes of 
				motion and orientation (at,left,up) with respect to the vehicles
				local frame (x,y,z).
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Vehicle Flags">
			Flags
			<Word name="VEHICLE_FLAG_NO_FLY_UP">
				Old,changed to VEHICLE_FLAG_NO_DEFLECTION_UP
			</Word>
			<Word name="VEHICLE_FLAG_NO_DEFLECTION_UP">
				This flag prevents linear deflection parallel to world z-axis. 
				This is useful for preventing ground vehicles
				with large linear deflection,like bumper cars,
				from climbing their linear deflection into the sky.
			</Word>
			<Word name="VEHICLE_FLAG_LIMIT_ROLL_ONLY">
				For vehicles with vertical attractor 
				that want to be able to climb/dive,for instance,
				airplanes that want to use the banking feature.
			</Word>
			<Word name="VEHICLE_FLAG_HOVER_WATER_ONLY">
				Ignore terrain height when hovering.
			</Word>
			<Word name="VEHICLE_FLAG_HOVER_TERRAIN_ONLY">
				Ignore water height when hovering.
			</Word>
			<Word name="VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT">
				Hover at global height.
			</Word>
			<Word name="VEHICLE_FLAG_HOVER_UP_ONLY">
				Hover doesnt push down. Use this flag for hovering vehicles 
				that should be able to jump above their hover
				height.
			</Word>
			<Word name="VEHICLE_FLAG_LIMIT_MOTOR_UP">
				Prevents ground vehicles from motoring into the sky.
			</Word>
		</WordsSubsection>
		<WordsSubsection name="Vehicle Types">
			Types
			<Word name="VEHICLE_TYPE_SLED">
				Simple vehicle that bumps along the ground,
				and likes to move along its local x-axis.
				// most friction for left-right,least for up-down
				llSetVehicleVectorParam(VEHICLE_LINEAR_FRICTION_TIMESCALE,&lt;30,1,1000&gt;)
				// no angular friction
				llSetVehicleVectorParam(VEHICLE_ANGULAR_FRICTION_TIMESCALE,&lt;1000,1000,1000&gt;)
				// no linear motor
				llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_TIMESCALE,1000)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,120)
				// no agular motor
				llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_TIMESCALE,1000)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,120)
				// no hover (but with timescale of 10 sec if enabled)
				llSetVehicleFloatParam(VEHICLE_HOVER_HEIGHT,0)
				llSetVehicleFloatParam(VEHICLE_HOVER_EFFICIENCY,10)
				llSetVehicleFloatParam(VEHICLE_HOVER_TIMESCALE,10)
				llSetVehicleFloatParam(VEHICLE_BUOYANCY,0)
				// maximum linear deflection with timescale of 1 second
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,1)
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_TIMESCALE,1)
				// no angular deflection
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,10)
				// no vertical attractor (doesnt mind flipping over)
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,1)
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,1000)
				// no banking
				llSetVehicleFloatParam(VEHICLE_BANKING_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_BANKING_MIX,1)
				llSetVehicleFloatParam(VEHICLE_BANKING_TIMESCALE,10)
				// default rotation of local frame
				llSetVehicleRotationParam(VEHICLE_REFERENCE_FRAME,&lt;0,0,0,1&gt;)
				// remove these flags
				llRemoveVehicleFlags(VEHICLE_FLAG_HOVER_WATER_ONLY
				| VEHICLE_FLAG_HOVER_TERRAIN_ONLY
				| VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT
				| VEHICLE_FLAG_HOVER_UP_ONLY)
				// set these flags (the limit_roll flag will have no effect
				// until banking is enabled,if ever)
				llSetVehicleFlags(VEHICLE_FLAG_NO_DEFLECTION_UP
				| VEHICLE_FLAG_LIMIT_ROLL_ONLY
				| VEHICLE_FLAG_LIMIT_MOTOR_UP)
			</Word>
			<Word name="VEHICLE_TYPE_CAR">
				Another vehicle that bounces along the ground but needs 
				the motors to be driven from external controls or
				timer events.
				// most friction for left-right,least for up-down
				llSetVehicleVectorParam(VEHICLE_LINEAR_FRICTION_TIMESCALE,&lt;100,2,1000&gt;)
				// no angular friction
				llSetVehicleVectorParam(VEHICLE_ANGULAR_FRICTION_TIMESCALE,&lt;1000,1000,1000&gt;)
				// linear motor wins after about a second,decays after about a minute
				llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_TIMESCALE,1)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,60)
				// agular motor wins after a second,decays in less time than that
				llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_TIMESCALE,1)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,0.8)
				// no hover
				llSetVehicleFloatParam(VEHICLE_HOVER_HEIGHT,0)
				llSetVehicleFloatParam(VEHICLE_HOVER_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_HOVER_TIMESCALE,1000)
				llSetVehicleFloatParam(VEHICLE_BUOYANCY,0)
				// maximum linear deflection with timescale of 2 seconds
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,1)
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_TIMESCALE,2)
				// no angular deflection
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,10)
				// critically damped vertical attractor
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,1)
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,10)
				// weak negative critically damped banking
				llSetVehicleFloatParam(VEHICLE_BANKING_EFFICIENCY,-0.2)
				llSetVehicleFloatParam(VEHICLE_BANKING_MIX,1)
				llSetVehicleFloatParam(VEHICLE_BANKING_TIMESCALE,1)
				// default rotation of local frame
				llSetVehicleRotationParam(VEHICLE_REFERENCE_FRAME,&lt;0,0,0,1&gt;)
				// remove these flags
				llRemoveVehicleFlags(VEHICLE_FLAG_HOVER_WATER_ONLY
				| VEHICLE_FLAG_HOVER_TERRAIN_ONLY
				| VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT)
				// set these flags
				llSetVehicleFlags(VEHICLE_FLAG_NO_DEFLECTION_UP
				| VEHICLE_FLAG_LIMIT_ROLL_ONLY
				| VEHICLE_FLAG_HOVER_UP_ONLY
				| VEHICLE_FLAG_LIMIT_MOTOR_UP)
			</Word>
			<Word name="VEHICLE_TYPE_BOAT">
				Hovers over water with lots of friction and some anglar deflection.
				// least for forward-back,most friction for up-down
				llSetVehicleVectorParam(VEHICLE_LINEAR_FRICTION_TIMESCALE,&lt;10,3,2&gt;)
				// uniform angular friction (setting it as a scalar rather than a vector)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_FRICTION_TIMESCALE,10)
				// linear motor wins after about five seconds,decays after about a minute
				llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_TIMESCALE,5)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,60)
				// agular motor wins after four seconds,decays in same amount of time
				llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_TIMESCALE,4)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,4)
				// hover
				llSetVehicleFloatParam(VEHICLE_HOVER_HEIGHT,0)
				llSetVehicleFloatParam(VEHICLE_HOVER_EFFICIENCY,0.5)
				llSetVehicleFloatParam(VEHICLE_HOVER_TIMESCALE,2.0)
				llSetVehicleFloatParam(VEHICLE_BUOYANCY,1)
				// halfway linear deflection with timescale of 3 seconds
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,0.5)
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_TIMESCALE,3)
				// angular deflection
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,0.5)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,5)
				// somewhat bounscy vertical attractor
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,0.5)
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,5)
				// weak negative damped banking
				llSetVehicleFloatParam(VEHICLE_BANKING_EFFICIENCY,-0.3)
				llSetVehicleFloatParam(VEHICLE_BANKING_MIX,0.8)
				llSetVehicleFloatParam(VEHICLE_BANKING_TIMESCALE,1)
				// default rotation of local frame
				llSetVehicleRotationParam(VEHICLE_REFERENCE_FRAME,&lt;0,0,0,1&gt;)
				// remove these flags
				llRemoveVehicleFlags(VEHICLE_FLAG_HOVER_TERRAIN_ONLY
				| VEHICLE_FLAG_LIMIT_ROLL_ONLY
				| VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT)
				// set these flags
				llSetVehicleFlags(VEHICLE_FLAG_NO_DEFLECTION_UP
				| VEHICLE_FLAG_HOVER_WATER_ONLY
				| VEHICLE_FLAG_HOVER_UP_ONLY
				| VEHICLE_FLAG_LIMIT_MOTOR_UP)
			</Word>
			<Word name="VEHICLE_TYPE_AIRPLANE">
				Uses linear deflection for lift,no hover,and banking to turn.
				// very little friction along forward-back axis
				llSetVehicleVectorParam(VEHICLE_LINEAR_FRICTION_TIMESCALE,&lt;200,10,5&gt;)
				// uniform angular friction
				llSetVehicleFloatParam(VEHICLE_ANGULAR_FRICTION_TIMESCALE,20)
				// linear motor
				llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_TIMESCALE,2)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,60)
				// agular motor
				llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_TIMESCALE,4)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,8)
				// no hover
				llSetVehicleFloatParam(VEHICLE_HOVER_HEIGHT,0)
				llSetVehicleFloatParam(VEHICLE_HOVER_EFFICIENCY,0.5)
				llSetVehicleFloatParam(VEHICLE_HOVER_TIMESCALE,1000)
				llSetVehicleFloatParam(VEHICLE_BUOYANCY,0)
				// linear deflection
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,0.5)
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_TIMESCALE,0.5)
				// angular deflection
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,1.0)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,2.0)
				// vertical attractor
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,0.9)
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,2)
				// banking
				llSetVehicleFloatParam(VEHICLE_BANKING_EFFICIENCY,1)
				llSetVehicleFloatParam(VEHICLE_BANKING_MIX,0.7)
				llSetVehicleFloatParam(VEHICLE_BANKING_TIMESCALE,2)
				// default rotation of local frame
				llSetVehicleRotationParam(VEHICLE_REFERENCE_FRAME,&lt;0,0,0,1&gt;)
				// remove these flags
				llRemoveVehicleFlags(VEHICLE_FLAG_NO_DEFLECTION_UP
				| VEHICLE_FLAG_HOVER_WATER_ONLY
				| VEHICLE_FLAG_HOVER_TERRAIN_ONLY
				| VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT
				| VEHICLE_FLAG_HOVER_UP_ONLY
				| VEHICLE_FLAG_LIMIT_MOTOR_UP)
				// set these flags
				llSetVehicleFlags(VEHICLE_FLAG_LIMIT_ROLL_ONLY)
			</Word>
			<Word name="VEHICLE_TYPE_BALLOON">
				Hover,and friction,but no deflection.
				// uniform linear friction
				llSetVehicleFloatParam(VEHICLE_LINEAR_FRICTION_TIMESCALE,5)
				// uniform angular friction
				llSetVehicleFloatParam(VEHICLE_ANGULAR_FRICTION_TIMESCALE,10)
				// linear motor
				llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_TIMESCALE,5)
				llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,60)
				// agular motor
				llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION,&lt;0,0,0&gt;)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_TIMESCALE,6)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,10)
				// hover
				llSetVehicleFloatParam(VEHICLE_HOVER_HEIGHT,5)
				llSetVehicleFloatParam(VEHICLE_HOVER_EFFICIENCY,0.8)
				llSetVehicleFloatParam(VEHICLE_HOVER_TIMESCALE,10)
				llSetVehicleFloatParam(VEHICLE_BUOYANCY,1)
				// no linear deflection
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_TIMESCALE,5)
				// no angular deflection
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,5)
				// no vertical attractor
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,1)
				llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_TIMESCALE,1000)
				// no banking
				llSetVehicleFloatParam(VEHICLE_BANKING_EFFICIENCY,0)
				llSetVehicleFloatParam(VEHICLE_BANKING_MIX,0.7)
				llSetVehicleFloatParam(VEHICLE_BANKING_TIMESCALE,5)
				// default rotation of local frame
				llSetVehicleRotationParam(VEHICLE_REFERENCE_FRAME,&lt;0,0,0,1&gt;)
				// remove all flags
				llRemoveVehicleFlags(VEHICLE_FLAG_NO_DEFLECTION_UP
				| VEHICLE_FLAG_HOVER_WATER_ONLY
				| VEHICLE_FLAG_LIMIT_ROLL_ONLY
				| VEHICLE_FLAG_HOVER_TERRAIN_ONLY
				| VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT
				| VEHICLE_FLAG_HOVER_UP_ONLY
				| VEHICLE_FLAG_LIMIT_MOTOR_UP)
			</Word>
			<Word name="AGENT_ALWAYS_RUN"/>
			<Word name="AGENT_AWAY"/>
			<Word name="AGENT_BUSY"/>
			<Word name="AGENT_CROUCHING"/>
			<Word name="AGENT_IN_AIR"/>
			<Word name="AGENT_MOUSELOOK"/>
			<Word name="AGENT_ON_OBJECT"/>
			<Word name="AGENT_SITTING"/>
			<Word name="AGENT_TYPING"/>
			<Word name="AGENT_WALKING"/>
			<Word name="ALL_SIDES"/>
			<Word name="CAMERA_ACTIVE"/>
			<Word name="CAMERA_BEHINDNESS_ANGLE"/>
			<Word name="CAMERA_BEHINDNESS_LAG"/>
			<Word name="CAMERA_DISTANCE"/>
			<Word name="CAMERA_FOCUS"/>
			<Word name="CAMERA_FOCUS_LAG"/>
			<Word name="CAMERA_FOCUS_LOCKED"/>
			<Word name="CAMERA_FOCUS_OFFSET"/>
			<Word name="CAMERA_FOCUS_THRESHOLD"/>
			<Word name="CAMERA_PITCH"/>
			<Word name="CAMERA_POSITION"/>
			<Word name="CAMERA_POSITION_LAG"/>
			<Word name="CAMERA_POSITION_LOCKED"/>
			<Word name="CAMERA_POSITION_THRESHOLD"/>
			<Word name="CHANGED_OWNER"/>
			<Word name="CHANGED_REGION"/>
			<Word name="CHANGED_TELEPORT"/>
			<Word name="DATA_SIM_POS"/>
			<Word name="DATA_SIM_RATING"/>
			<Word name="DATA_SIM_STATUS"/>
			<Word name="DEBUG_CHANNEL">
				DEBUG_CHANNEL is an integer constant that,when passed to 
				llSay,llWhisper,or llShout as a channel parameter,
				will print text to the Script Warning/Error Window.
				It has the value '2147483647'.
			</Word>
			<Word name="EOF"/>
			<Word name="HTTP_BODY_MAXLENGTH"/>
			<Word name="HTTP_BODY_TRUNCATED"/>
			<Word name="HTTP_METHOD"/>
			<Word name="HTTP_MIMETYPE"/>
			<Word name="INVENTORY_ALL"/>
			<Word name="INVENTORY_ANIMATION"/>
			<Word name="INVENTORY_GESTURE"/>
			<Word name="INVENTORY_NONE"/>
			<Word name="LAND_NOISE"/>
			<Word name="LAND_REVERT"/>
			<Word name="LAND_SMOOTH"/>
			<Word name="LINK_THIS"/>
			<Word name="LIST_STAT_GEOMETRIC_MEAN"/>
			<Word name="LIST_STAT_MAX"/>
			<Word name="LIST_STAT_MEAN"/>
			<Word name="LIST_STAT_MEDIAN"/>
			<Word name="LIST_STAT_MIN"/>
			<Word name="LIST_STAT_NUM_COUNT"/>
			<Word name="LIST_STAT_RANGE"/>
			<Word name="LIST_STAT_STD_DEV"/>
			<Word name="LIST_STAT_SUM"/>
			<Word name="LIST_STAT_SUM_SQUARES"/>
			<Word name="MASK_BASE"/>
			<Word name="MASK_EVERYONE"/>
			<Word name="MASK_GROUP"/>
			<Word name="MASK_NEXT"/>
			<Word name="MASK_OWNER"/>
			<Word name="NULL_KEY"/>

			<Word name="PARCEL_FLAG_ALLOW_CREATE_OBJECTS"/>
			<Word name="PARCEL_FLAG_ALLOW_DAMAGE"/>
			<Word name="PARCEL_FLAG_ALLOW_FLY"/>
			<Word name="PARCEL_FLAG_ALLOW_LANDMARK"/>
			<Word name="PARCEL_FLAG_ALLOW_SCRIPTS"/>
			<Word name="PARCEL_FLAG_ALLOW_TERRAFORM"/>
			<Word name="PARCEL_FLAG_LOCAL_SOUND_ONLY"/>
			<Word name="PARCEL_FLAG_USE_ACCESS_GROUP"/>
			<Word name="PARCEL_FLAG_USE_ACCESS_LIST"/>
			<Word name="PARCEL_FLAG_USE_BAN_LIST"/>
			<Word name="PARCEL_FLAG_USE_LAND_PASS_LIST"/>

			<Word name="PARCEL_FLAG_ALLOW_GROUP_SCRIPTS" value="0x2000000"/>
			<Word name="PARCEL_FLAG_RESTRICT_PUSHOBJECT" value="0x200000"/>

			<Word name="PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS"/>
			<Word name="PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY"/>
			<Word name="PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY"/>

			<Word name="PARCEL_MEDIA_COMMAND_STOP"/>
			<Word name="PARCEL_MEDIA_COMMAND_PAUSE"/>
			<Word name="PARCEL_MEDIA_COMMAND_PLAY"/>
			<Word name="PARCEL_MEDIA_COMMAND_LOOP"/>
			<Word name="PARCEL_MEDIA_COMMAND_TEXTURE"/>
			<Word name="PARCEL_MEDIA_COMMAND_URL"/>
			<Word name="PARCEL_MEDIA_COMMAND_TIME"/>
			<Word name="PARCEL_MEDIA_COMMAND_AGENT"/>
			<Word name="PARCEL_MEDIA_COMMAND_UNLOAD"/>
			<Word name="PARCEL_MEDIA_COMMAND_AUTO_ALIGN"/>

			<Word name="PARCEL_MEDIA_COMMAND_TYPE" value="10">
				Use this to get or set the parcel media MIME type (e.g. "text/html").
			</Word>
			<Word name="PARCEL_MEDIA_COMMAND_SIZE" value="11">
				Use this to get or set the parcel media pixel resolution.
			</Word>
			<Word name="PARCEL_MEDIA_COMMAND_DESC" value="12">
				Use this to get or set the parcel media description.
			</Word>
			<Word name="PARCEL_MEDIA_COMMAND_LOOP_SET" value="13">
				Used to get or set the parcel's media looping variable.
			</Word>

			<Word name="DATA_PAYINFO" value="8"/>
			<Word name="HTTP_VERIFY_CERT" value="3"/>
			<Word name="PARCEL_COUNT_GROUP" value="2"/>
			<Word name="PARCEL_COUNT_OTHER" value="3"/>
			<Word name="PARCEL_COUNT_OWNER" value="1"/>
			<Word name="PARCEL_COUNT_SELECTED" value="4"/>
			<Word name="PARCEL_COUNT_TEMP" value="5"/>
			<Word name="PARCEL_COUNT_TOTAL" value="0"/>
			<Word name="PARCEL_DETAILS_AREA" value="4"/>
			<Word name="PARCEL_DETAILS_DESC" value="1"/>
			<Word name="PARCEL_DETAILS_GROUP" value="3"/>
			<Word name="PARCEL_DETAILS_NAME" value="0"/>
			<Word name="PARCEL_DETAILS_OWNER" value="2"/>
			<Word name="PAYMENT_INFO_ON_FILE" value="1"/>
			<Word name="PAYMENT_INFO_USED" value="2"/>
			<Word name="REGION_FLAG_RESTRICT_PUSHOBJECT" value="4194304"/>

			<Word name="STRING_TRIM_HEAD"/>
			<Word name="STRING_TRIM_TAIL"/>
			<Word name="STRING_TRIM"/>

			<Word name="PAY_DEFAULT"/>
			<Word name="PAY_HIDE"/>
			<Word name="PERM_ALL"/>
			<Word name="PERM_COPY"/>
			<Word name="PERM_MODIFY"/>
			<Word name="PERM_MOVE"/>
			<Word name="PERM_TRANSFER"/>
			<Word name="PERMISSION_CONTROL_CAMERA"/>
			<Word name="PERMISSION_TRACK_CAMERA"/>

			<Word name="PRIM_BUMP_BARK"/>
			<Word name="PRIM_BUMP_BLOBS"/>
			<Word name="PRIM_BUMP_BRICKS"/>
			<Word name="PRIM_BUMP_BRIGHT"/>
			<Word name="PRIM_BUMP_CHECKER"/>
			<Word name="PRIM_BUMP_CONCRETE"/>
			<Word name="PRIM_BUMP_DARK"/>
			<Word name="PRIM_BUMP_DISKS"/>
			<Word name="PRIM_BUMP_GRAVEL"/>
			<Word name="PRIM_BUMP_LARGETILE"/>
			<Word name="PRIM_BUMP_NONE"/>
			<Word name="PRIM_BUMP_SHINY"/>
			<Word name="PRIM_BUMP_SIDING"/>
			<Word name="PRIM_BUMP_STONE"/>
			<Word name="PRIM_BUMP_STUCCO"/>
			<Word name="PRIM_BUMP_SUCTION"/>
			<Word name="PRIM_BUMP_TILE"/>
			<Word name="PRIM_BUMP_WEAVE"/>
			<Word name="PRIM_BUMP_WOOD"/>

			<Word name="PRIM_CAST_SHADOWS"/>
			<Word name="PRIM_COLOR"/>
			<Word name="PRIM_FLEXIBLE"/>
			<Word name="PRIM_FULLBRIGHT"/>

			<Word name="PRIM_HOLE_DEFAULT"/>
			<Word name="PRIM_HOLE_CIRCLE"/>
			<Word name="PRIM_HOLE_SQUARE"/>
			<Word name="PRIM_HOLE_TRIANGLE"/>

			<Word name="PRIM_MATERIAL"/>
			<Word name="PRIM_MATERIAL_FLESH"/>
			<Word name="PRIM_MATERIAL_GLASS"/>
			<Word name="PRIM_MATERIAL_LIGHT"/>
			<Word name="PRIM_MATERIAL_METAL"/>
			<Word name="PRIM_MATERIAL_PLASTIC"/>
			<Word name="PRIM_MATERIAL_RUBBER"/>
			<Word name="PRIM_MATERIAL_STONE"/>
			<Word name="PRIM_MATERIAL_WOOD"/>
			<Word name="PRIM_PHANTOM"/>
			<Word name="PRIM_PHYSICS"/>
			<Word name="PRIM_POINT_LIGHT"/>
			<Word name="PRIM_POSITION"/>
			<Word name="PRIM_ROTATION"/>

			<Word name="PRIM_SHINY_HIGH"/>
			<Word name="PRIM_SHINY_LOW"/>
			<Word name="PRIM_SHINY_MEDIUM"/>
			<Word name="PRIM_SHINY_NONE"/>

			<Word name="PRIM_SIZE"/>
			<Word name="PRIM_TEMP_ON_REZ"/>
			<Word name="PRIM_TEXGEN"/>
			<Word name="PRIM_TEXGEN_DEFAULT"/>
			<Word name="PRIM_TEXGEN_PLANAR"/>
			<Word name="PRIM_TEXTURE"/>
			<Word name="PRIM_TYPE"/>

			<Word name="PRIM_TYPE_BOX"/>
			<Word name="PRIM_TYPE_CYLINDER"/>
			<Word name="PRIM_TYPE_PRISM"/>
			<Word name="PRIM_TYPE_SPHERE"/>
			<Word name="PRIM_TYPE_TORUS"/>
			<Word name="PRIM_TYPE_TUBE"/>
			<Word name="PRIM_TYPE_RING"/>
			<Word name="PRIM_TYPE_SCULPT"/>

			<Word name="PRIM_SCULPT_TYPE_SPHERE"/>
			<Word name="PRIM_SCULPT_TYPE_TORUS"/>
			<Word name="PRIM_SCULPT_TYPE_PLANE"/>
			<Word name="PRIM_SCULPT_TYPE_CYLINDER"/>

			<Word name="PRIM_GLOW">
				PRIM_GLOW is used to get or set the glow status of the face.
			</Word>
				  
			<Word name="PSYS_PART_TARGET_LINEAR_MASK"/>
			<Word name="PSYS_SRC_ANGLE_BEGIN">
				Area in radians specifying where particles
				will NOT be created (for ANGLE patterns)
			</Word>
			<Word name="PSYS_SRC_ANGLE_END">
				Area in radians filled with particles 
				(for ANGLE patterns) (if lower than PSYS_SRC_ANGLE_BEGIN,
				acts as PSYS_SRC_ANGLE_BEGIN itself,
				and PSYS_SRC_ANGLE_BEGIN acts as PSYS_SRC_ANGLE_END)
			</Word>
			<Word name="PSYS_SRC_PATTERN_ANGLE"/>
			<Word name="PSYS_SRC_PATTERN_ANGLE_CONE"/>
			<Word name="PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY"/>
			<Word name="PSYS_SRC_PATTERN_DROP"/>
			<Word name="PSYS_SRC_PATTERN_EXPLODE"/>
			<Word name="PUBLIC_CHANNEL">
				PUBLIC_CHANNEL is an integer constant that,when passed to
				llSay,llWhisper,or llShout as a channel parameter,
				will print text to the publicly heard chat channel. Has the value '0'.
			</Word>
			<Word name="REGION_FLAG_ALLOW_DAMAGE"/>
			<Word name="REGION_FLAG_ALLOW_DIRECT_TELEPORT"/>
			<Word name="REGION_FLAG_BLOCK_FLY"/>
			<Word name="REGION_FLAG_BLOCK_TERRAFORM"/>
			<Word name="REGION_FLAG_DISABLE_COLLISIONS"/>
			<Word name="REGION_FLAG_DISABLE_PHYSICS"/>
			<Word name="REGION_FLAG_FIXED_SUN"/>
			<Word name="REGION_FLAG_SANDBOX"/>
			<Word name="REMOTE_DATA_CHANNEL"/>
			<Word name="REMOTE_DATA_REPLY"/>
			<Word name="REMOTE_DATA_REQUEST"/>
			<Word name="STATUS_CAST_SHADOWS"/>
			<Word name="STATUS_RETURN_AT_EDGE"/>
			<Word name="VEHICLE_FLAG_CAMERA_DECOUPLED"/>
			<Word name="VEHICLE_FLAG_MOUSELOOK_BANK"/>
			<Word name="VEHICLE_FLAG_MOUSELOOK_STEER"/>
			<Word name="VEHICLE_HOVER_EFFICIENCY"/>
			<Word name="VEHICLE_HOVER_TIMESCALE"/>
			<Word name="VEHICLE_LINEAR_MOTOR_OFFSET"/>
			<Word name="VEHICLE_TYPE_NONE"/>
			<Word name="ZERO_ROTATION"/>
			<Word name="ZERO_VECTOR"/>

			<Word name="OBJECT_NAME">
				Gets the object's name.
			</Word>
			<Word name="OBJECT_DESC">
				Gets the object's description.
				If id is an avatar,an empty string is returned.
			</Word>
			<Word name="OBJECT_POS">
				Gets the object's position in region coordinates.
			</Word>
			<Word name="OBJECT_ROT">
				Gets the object's rotation.
			</Word>
			<Word name="OBJECT_VELOCITY">
				Gets the object's velocity.
			</Word>
			<Word name="OBJECT_OWNER">
				Gets an object's owner's key.
				If id is group owned,a NULL_KEY is returned.
			</Word>
			<Word name="OBJECT_GROUP">
				Gets the prims's group key.
				If id is an avatar,a NULL_KEY is returned.
			</Word>
			<Word name="OBJECT_CREATOR">
				Gets the object's creator key.
				If id is an avatar,a NULL_KEY is returned.
			</Word>
			
			<Word name="CLICK_ACTION_NONE">
				Performs the default action: when the prim is touched,touch events are triggered"
			</Word>
			<Word name="CLICK_ACTION_TOUCH">
				When the prim is touched,touch events are triggered"
			</Word>
			<Word name="CLICK_ACTION_SIT">
				When the prim is touched,the avatar sits upon it
			</Word>
			<Word name="CLICK_ACTION_BUY">
				When the prim is touched,the buy dialog is opened
			</Word>
			<Word name="CLICK_ACTION_PAY">
				When the prim is touched,the pay dialog is opened
			</Word>
			<Word name="CLICK_ACTION_OPEN">
				When the prim is touched,the object inventory dialog is opened
			</Word>
			<Word name="CLICK_ACTION_PLAY">
				When the prim is touched,html-on-a-prim is enabled?
			</Word>
			<Word name="CLICK_ACTION_OPEN_MEDIA">
				When the prim is touched,the web media dialog is opened"
			</Word>

			<Word name="URL_REQUEST_GRANTED" />
			<Word name="URL_REQUEST_DENIED" />

		</WordsSubsection>
	</Words>
</Conf>
